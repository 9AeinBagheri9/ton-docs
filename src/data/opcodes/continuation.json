[
  {
    "name": "EXECUTE",
    "alias_of": "",
    "tlb": "#D8",
    "doc_category": "cont_basic",
    "doc_opcode": "D8",
    "doc_fift": "EXECUTE\nCALLX",
    "doc_stack": "c -",
    "doc_gas": 18,
    "doc_description": "_Calls_, or _executes_, continuation `c`."
  },
  {
    "name": "JMPX",
    "alias_of": "",
    "tlb": "#D9",
    "doc_category": "cont_basic",
    "doc_opcode": "D9",
    "doc_fift": "JMPX",
    "doc_stack": "c -",
    "doc_gas": 18,
    "doc_description": "_Jumps_, or transfers control, to continuation `c`.\nThe remainder of the previous current continuation `cc` is discarded."
  },
  {
    "name": "CALLXARGS",
    "alias_of": "",
    "tlb": "#DA p:uint4 r:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DApr",
    "doc_fift": "[p] [r] CALLXARGS",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `p` parameters and expecting `r` return values\n`0 <= p <= 15`, `0 <= r <= 15`"
  },
  {
    "name": "CALLXARGS_VAR",
    "alias_of": "",
    "tlb": "#DB0 p:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB0p",
    "doc_fift": "[p] -1 CALLXARGS",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "_Calls_ continuation `c` with `0 <= p <= 15` parameters, expecting an arbitrary number of return values."
  },
  {
    "name": "JMPXARGS",
    "alias_of": "",
    "tlb": "#DB1 p:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB1p",
    "doc_fift": "[p] JMPXARGS",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "_Jumps_ to continuation `c`, passing only the top `0 <= p <= 15` values from the current stack to it (the remainder of the current stack is discarded)."
  },
  {
    "name": "RETARGS",
    "alias_of": "",
    "tlb": "#DB2 r:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB2r",
    "doc_fift": "[r] RETARGS",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "_Returns_ to `c0`, with `0 <= r <= 15` return values taken from the current stack."
  },
  {
    "name": "RET",
    "alias_of": "",
    "tlb": "#DB30",
    "doc_category": "cont_basic",
    "doc_opcode": "DB30",
    "doc_fift": "RET\nRETTRUE",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "_Returns_ to the continuation at `c0`. The remainder of the current continuation `cc` is discarded.\nApproximately equivalent to `c0 PUSHCTR` `JMPX`."
  },
  {
    "name": "RETALT",
    "alias_of": "",
    "tlb": "#DB31",
    "doc_category": "cont_basic",
    "doc_opcode": "DB31",
    "doc_fift": "RETALT\nRETFALSE",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "_Returns_ to the continuation at `c1`.\nApproximately equivalent to `c1 PUSHCTR` `JMPX`."
  },
  {
    "name": "BRANCH",
    "alias_of": "",
    "tlb": "#DB32",
    "doc_category": "cont_basic",
    "doc_opcode": "DB32",
    "doc_fift": "BRANCH\nRETBOOL",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETTRUE` if integer `f!=0`, or `RETFALSE` if `f=0`."
  },
  {
    "name": "CALLCC",
    "alias_of": "",
    "tlb": "#DB34",
    "doc_category": "cont_basic",
    "doc_opcode": "DB34",
    "doc_fift": "CALLCC",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "_Call with current continuation_, transfers control to `c`, pushing the old value of `cc` into `c`'s stack (instead of discarding it or writing it into new `c0`)."
  },
  {
    "name": "JMPXDATA",
    "alias_of": "",
    "tlb": "#DB35",
    "doc_category": "cont_basic",
    "doc_opcode": "DB35",
    "doc_fift": "JMPXDATA",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Similar to `CALLCC`, but the remainder of the current continuation (the old value of `cc`) is converted into a _Slice_ before pushing it into the stack of `c`."
  },
  {
    "name": "CALLCCARGS",
    "alias_of": "",
    "tlb": "#DB36 p:uint4 r:uint4",
    "doc_category": "cont_basic",
    "doc_opcode": "DB36pr",
    "doc_fift": "[p] [r] CALLCCARGS",
    "doc_stack": "c -",
    "doc_gas": 34,
    "doc_description": "Similar to `CALLXARGS`, but pushes the old value of `cc` (along with the top `0 <= p <= 15` values from the original stack) into the stack of newly-invoked continuation `c`, setting `cc.nargs` to `-1 <= r <= 14`."
  },
  {
    "name": "CALLXVARARGS",
    "alias_of": "",
    "tlb": "#DB38",
    "doc_category": "cont_basic",
    "doc_opcode": "DB38",
    "doc_fift": "CALLXVARARGS",
    "doc_stack": "c p r -",
    "doc_gas": 26,
    "doc_description": "Similar to `CALLXARGS`, but takes `-1 <= p,r <= 254` from the stack. The next three operations also take `p` and `r` from the stack, both in the range `-1...254`."
  },
  {
    "name": "RETVARARGS",
    "alias_of": "",
    "tlb": "#DB39",
    "doc_category": "cont_basic",
    "doc_opcode": "DB39",
    "doc_fift": "RETVARARGS",
    "doc_stack": "p r -",
    "doc_gas": 26,
    "doc_description": "Similar to `RETARGS`."
  },
  {
    "name": "JMPXVARARGS",
    "alias_of": "",
    "tlb": "#DB3A",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3A",
    "doc_fift": "JMPXVARARGS",
    "doc_stack": "c p r -",
    "doc_gas": 26,
    "doc_description": "Similar to `JMPXARGS`."
  },
  {
    "name": "CALLCCVARARGS",
    "alias_of": "",
    "tlb": "#DB3B",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3B",
    "doc_fift": "CALLCCVARARGS",
    "doc_stack": "c p r -",
    "doc_gas": 26,
    "doc_description": "Similar to `CALLCCARGS`."
  },
  {
    "name": "CALLREF",
    "alias_of": "",
    "tlb": "#DB3C c:^Cell",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3C",
    "doc_fift": "[ref] CALLREF",
    "doc_stack": "",
    "doc_gas": "126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `CALLX`."
  },
  {
    "name": "JMPREF",
    "alias_of": "",
    "tlb": "#DB3D c:^Cell",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3D",
    "doc_fift": "[ref] JMPREF",
    "doc_stack": "",
    "doc_gas": "126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `JMPX`."
  },
  {
    "name": "JMPREFDATA",
    "alias_of": "",
    "tlb": "#DB3E c:^Cell",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3E",
    "doc_fift": "[ref] JMPREFDATA",
    "doc_stack": "",
    "doc_gas": "126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `JMPXDATA`."
  },
  {
    "name": "RETDATA",
    "alias_of": "",
    "tlb": "#DB3F",
    "doc_category": "cont_basic",
    "doc_opcode": "DB3F",
    "doc_fift": "RETDATA",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `c0 PUSHCTR` `JMPXDATA`. In this way, the remainder of the current continuation is converted into a _Slice_ and returned to the caller."
  },
  {
    "name": "IFRET",
    "alias_of": "",
    "tlb": "#DC",
    "doc_category": "cont_conditional",
    "doc_opcode": "DC",
    "doc_fift": "IFRET\nIFNOT:",
    "doc_stack": "f -",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is non-zero. If `f` is a `NaN`, throws an integer overflow exception."
  },
  {
    "name": "IFNOTRET",
    "alias_of": "",
    "tlb": "#DD",
    "doc_category": "cont_conditional",
    "doc_opcode": "DD",
    "doc_fift": "IFNOTRET\nIF:",
    "doc_stack": "f -",
    "doc_gas": 18,
    "doc_description": "Performs a `RET`, but only if integer `f` is zero."
  },
  {
    "name": "IF",
    "alias_of": "",
    "tlb": "#DE",
    "doc_category": "cont_conditional",
    "doc_opcode": "DE",
    "doc_fift": "IF",
    "doc_stack": "f c -",
    "doc_gas": 18,
    "doc_description": "Performs `EXECUTE` for `c` (i.e., _executes_ `c`), but only if integer `f` is non-zero. Otherwise simply discards both values."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_conditional",
    "doc_opcode": "DE",
    "doc_fift": "IF:<{ code }>\n<{ code }>IF",
    "doc_stack": "f -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `IF`."
  },
  {
    "name": "IFNOT",
    "alias_of": "",
    "tlb": "#DF",
    "doc_category": "cont_conditional",
    "doc_opcode": "DF",
    "doc_fift": "IFNOT",
    "doc_stack": "f c -",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, but only if integer `f` is zero. Otherwise simply discards both values."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_conditional",
    "doc_opcode": "DF",
    "doc_fift": "IFNOT:<{ code }>\n<{ code }>IFNOT",
    "doc_stack": "f -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `IFNOT`."
  },
  {
    "name": "IFJMP",
    "alias_of": "",
    "tlb": "#E0",
    "doc_category": "cont_conditional",
    "doc_opcode": "E0",
    "doc_fift": "IFJMP",
    "doc_stack": "f c -",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is non-zero."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_conditional",
    "doc_opcode": "E0",
    "doc_fift": "IFJMP:<{ code }>",
    "doc_stack": "f -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `IFJMP`."
  },
  {
    "name": "IFNOTJMP",
    "alias_of": "",
    "tlb": "#E1",
    "doc_category": "cont_conditional",
    "doc_opcode": "E1",
    "doc_fift": "IFNOTJMP",
    "doc_stack": "f c -",
    "doc_gas": 18,
    "doc_description": "Jumps to `c` (similarly to `JMPX`), but only if `f` is zero."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_conditional",
    "doc_opcode": "E1",
    "doc_fift": "IFNOTJMP:<{ code }>",
    "doc_stack": "f -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `IFNOTJMP`."
  },
  {
    "name": "IFELSE",
    "alias_of": "",
    "tlb": "#E2",
    "doc_category": "cont_conditional",
    "doc_opcode": "E2",
    "doc_fift": "IFELSE",
    "doc_stack": "f c c' -",
    "doc_gas": 18,
    "doc_description": "If integer `f` is non-zero, executes `c`, otherwise executes `c'`. Equivalent to `CONDSELCHK` `EXECUTE`."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_conditional",
    "doc_opcode": "E2",
    "doc_fift": "IF:<{ code1 }>ELSE<{ code2 }>",
    "doc_stack": "f -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `IFELSE`."
  },
  {
    "name": "IFREF",
    "alias_of": "",
    "tlb": "#E300 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E300",
    "doc_fift": "[ref] IFREF",
    "doc_stack": "f -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `IF`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`.\nGas consumption of this primitive depends on whether `f=0` and whether the reference was loaded before.\nSimilar remarks apply other primitives that accept a continuation as a reference."
  },
  {
    "name": "IFNOTREF",
    "alias_of": "",
    "tlb": "#E301 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E301",
    "doc_fift": "[ref] IFNOTREF",
    "doc_stack": "f -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOT`."
  },
  {
    "name": "IFJMPREF",
    "alias_of": "",
    "tlb": "#E302 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E302",
    "doc_fift": "[ref] IFJMPREF",
    "doc_stack": "f -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `IFJMP`."
  },
  {
    "name": "IFNOTJMPREF",
    "alias_of": "",
    "tlb": "#E303 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E303",
    "doc_fift": "[ref] IFNOTJMPREF",
    "doc_stack": "f -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `IFNOTJMP`."
  },
  {
    "name": "CONDSEL",
    "alias_of": "",
    "tlb": "#E304",
    "doc_category": "cont_conditional",
    "doc_opcode": "E304",
    "doc_fift": "CONDSEL",
    "doc_stack": "f x y - x or y",
    "doc_gas": 26,
    "doc_description": "If integer `f` is non-zero, returns `x`, otherwise returns `y`. Notice that no type checks are performed on `x` and `y`; as such, it is more like a conditional stack operation. Roughly equivalent to `ROT` `ISZERO` `INC` `ROLLX` `NIP`."
  },
  {
    "name": "CONDSELCHK",
    "alias_of": "",
    "tlb": "#E305",
    "doc_category": "cont_conditional",
    "doc_opcode": "E305",
    "doc_fift": "CONDSELCHK",
    "doc_stack": "f x y - x or y",
    "doc_gas": 26,
    "doc_description": "Same as `CONDSEL`, but first checks whether `x` and `y` have the same type."
  },
  {
    "name": "IFRETALT",
    "alias_of": "",
    "tlb": "#E308",
    "doc_category": "cont_conditional",
    "doc_opcode": "E308",
    "doc_fift": "IFRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f!=0`."
  },
  {
    "name": "IFNOTRETALT",
    "alias_of": "",
    "tlb": "#E309",
    "doc_category": "cont_conditional",
    "doc_opcode": "E309",
    "doc_fift": "IFNOTRETALT",
    "doc_stack": "f -",
    "doc_gas": 26,
    "doc_description": "Performs `RETALT` if integer `f=0`."
  },
  {
    "name": "IFREFELSE",
    "alias_of": "",
    "tlb": "#E30D c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30D",
    "doc_fift": "[ref] IFREFELSE",
    "doc_stack": "f c -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `SWAP` `IFELSE`, with the optimization that the cell reference is not actually loaded into a _Slice_ and then converted into an ordinary _Continuation_ if `f=0`. Similar remarks apply to the next two primitives: cells are converted into continuations only when necessary."
  },
  {
    "name": "IFELSEREF",
    "alias_of": "",
    "tlb": "#E30E c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30E",
    "doc_fift": "[ref] IFELSEREF",
    "doc_stack": "f c -",
    "doc_gas": "26/126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "IFREFELSEREF",
    "alias_of": "",
    "tlb": "#E30F c1:^Cell c2:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E30F",
    "doc_fift": "[ref] [ref] IFREFELSEREF",
    "doc_stack": "f -",
    "doc_gas": "126/51",
    "doc_description": "Equivalent to `PUSHREFCONT` `PUSHREFCONT` `IFELSE`."
  },
  {
    "name": "IFBITJMP",
    "alias_of": "",
    "tlb": "#E39_ n:uint5",
    "doc_category": "cont_conditional",
    "doc_opcode": "E39_n",
    "doc_fift": "[n] IFBITJMP",
    "doc_stack": "x c - x",
    "doc_gas": 26,
    "doc_description": "Checks whether bit `0 <= n <= 31` is set in integer `x`, and if so, performs `JMPX` to continuation `c`. Value `x` is left in the stack."
  },
  {
    "name": "IFNBITJMP",
    "alias_of": "",
    "tlb": "#E3B_ n:uint5",
    "doc_category": "cont_conditional",
    "doc_opcode": "E3B_n",
    "doc_fift": "[n] IFNBITJMP",
    "doc_stack": "x c - x",
    "doc_gas": 26,
    "doc_description": "Jumps to `c` if bit `0 <= n <= 31` is not set in integer `x`."
  },
  {
    "name": "IFBITJMPREF",
    "alias_of": "",
    "tlb": "#E3D_ n:uint5 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E3D_n",
    "doc_fift": "[ref] [n] IFBITJMPREF",
    "doc_stack": "x - x",
    "doc_gas": "126/51",
    "doc_description": "Performs a `JMPREF` if bit `0 <= n <= 31` is set in integer `x`."
  },
  {
    "name": "IFNBITJMPREF",
    "alias_of": "",
    "tlb": "#E3F_ n:uint5 c:^Cell",
    "doc_category": "cont_conditional",
    "doc_opcode": "E3F_n",
    "doc_fift": "[ref] [n] IFNBITJMPREF",
    "doc_stack": "x - x",
    "doc_gas": "126/51",
    "doc_description": "Performs a `JMPREF` if bit `0 <= n <= 31` is not set in integer `x`."
  },
  {
    "name": "BLESS",
    "alias_of": "",
    "tlb": "#ED1E",
    "doc_category": "cont_create",
    "doc_opcode": "ED1E",
    "doc_fift": "BLESS",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Transforms a _Slice_ `s` into a simple ordinary continuation `c`, with `c.code=s` and an empty stack and savelist."
  },
  {
    "name": "BLESSVARARGS",
    "alias_of": "",
    "tlb": "#ED1F",
    "doc_category": "cont_create",
    "doc_opcode": "ED1F",
    "doc_fift": "BLESSVARARGS",
    "doc_stack": "x_1...x_r s r n - c",
    "doc_gas": "26+s”",
    "doc_description": "Equivalent to `ROT` `BLESS` `ROTREV` `SETCONTVARARGS`."
  },
  {
    "name": "BLESSARGS",
    "alias_of": "",
    "tlb": "#EE r:uint4 n:uint4",
    "doc_category": "cont_create",
    "doc_opcode": "EErn",
    "doc_fift": "[r] [n] BLESSARGS",
    "doc_stack": "x_1...x_r s - c",
    "doc_gas": 26,
    "doc_description": "`0 <= r <= 15`, `-1 <= n <= 14`\nEquivalent to `BLESS` `[r] [n] SETCONTARGS`.\nThe value of `n` is represented inside the instruction by the 4-bit integer `n mod 16`."
  },
  {
    "name": "BLESSNUMARGS",
    "alias_of": "BLESSARGS",
    "tlb": "#EE0 n:uint4",
    "doc_category": "cont_create",
    "doc_opcode": "EE0n",
    "doc_fift": "[n] BLESSNUMARGS",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Also transforms a _Slice_ `s` into a _Continuation_ `c`, but sets `c.nargs` to `0 <= n <= 14`."
  },
  {
    "name": "CALLDICT",
    "alias_of": "",
    "tlb": "#F0 n:uint8",
    "doc_category": "cont_dict",
    "doc_opcode": "F0nn",
    "doc_fift": "[nn] CALL\n[nn] CALLDICT",
    "doc_stack": "- nn",
    "doc_gas": "",
    "doc_description": "Calls the continuation in `c3`, pushing integer `0 <= nn <= 255` into its stack as an argument.\nApproximately equivalent to `[nn] PUSHINT` `c3 PUSHCTR` `EXECUTE`."
  },
  {
    "name": "CALLDICT_LONG",
    "alias_of": "",
    "tlb": "#F12_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F12_n",
    "doc_fift": "[n] CALL\n[n] CALLDICT",
    "doc_stack": "- n",
    "doc_gas": "",
    "doc_description": "For `0 <= n < 2^14`, an encoding of `[n] CALL` for larger values of `n`."
  },
  {
    "name": "JMPDICT",
    "alias_of": "",
    "tlb": "#F16_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F16_n",
    "doc_fift": "[n] JMP",
    "doc_stack": "- n",
    "doc_gas": "",
    "doc_description": "Jumps to the continuation in `c3`, pushing integer `0 <= n < 2^14` as its argument.\nApproximately equivalent to `n PUSHINT` `c3 PUSHCTR` `JMPX`."
  },
  {
    "name": "PREPAREDICT",
    "alias_of": "",
    "tlb": "#F1A_ n:uint14",
    "doc_category": "cont_dict",
    "doc_opcode": "F1A_n",
    "doc_fift": "[n] PREPARE\n[n] PREPAREDICT",
    "doc_stack": "- n c",
    "doc_gas": "",
    "doc_description": "Equivalent to `n PUSHINT` `c3 PUSHCTR`, for `0 <= n < 2^14`.\nIn this way, `[n] CALL` is approximately equivalent to `[n] PREPARE` `EXECUTE`, and `[n] JMP` is approximately equivalent to `[n] PREPARE` `JMPX`.\nOne might use, for instance, `CALLXARGS` or `CALLCC` instead of `EXECUTE` here."
  },
  {
    "name": "REPEAT",
    "alias_of": "",
    "tlb": "#E4",
    "doc_category": "cont_loops",
    "doc_opcode": "E4",
    "doc_fift": "REPEAT",
    "doc_stack": "n c -",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c` `n` times, if integer `n` is non-negative. If `n>=2^31` or `n<-2^31`, generates a range check exception.\nNotice that a `RET` inside the code of `c` works as a `continue`, not as a `break`. One should use either alternative (experimental) loops or alternative `RETALT` (along with a `SETEXITALT` before the loop) to `break` out of a loop."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E4",
    "doc_fift": "REPEAT:<{ code }>\n<{ code }>REPEAT",
    "doc_stack": "n -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `REPEAT`."
  },
  {
    "name": "REPEATEND",
    "alias_of": "",
    "tlb": "#E5",
    "doc_category": "cont_loops",
    "doc_opcode": "E5",
    "doc_fift": "REPEATEND\nREPEAT:",
    "doc_stack": "n -",
    "doc_gas": 18,
    "doc_description": "Similar to `REPEAT`, but it is applied to the current continuation `cc`."
  },
  {
    "name": "UNTIL",
    "alias_of": "",
    "tlb": "#E6",
    "doc_category": "cont_loops",
    "doc_opcode": "E6",
    "doc_fift": "UNTIL",
    "doc_stack": "c -",
    "doc_gas": 18,
    "doc_description": "Executes continuation `c`, then pops an integer `x` from the resulting stack. If `x` is zero, performs another iteration of this loop. The actual implementation of this primitive involves an extraordinary continuation `ec_until` with its arguments set to the body of the loop (continuation `c`) and the original current continuation `cc`. This extraordinary continuation is then saved into the savelist of `c` as `c.c0` and the modified `c` is then executed. The other loop primitives are implemented similarly with the aid of suitable extraordinary continuations."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E6",
    "doc_fift": "UNTIL:<{ code }>\n<{ code }>UNTIL",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `UNTIL`."
  },
  {
    "name": "UNTILEND",
    "alias_of": "",
    "tlb": "#E7",
    "doc_category": "cont_loops",
    "doc_opcode": "E7",
    "doc_fift": "UNTILEND\nUNTIL:",
    "doc_stack": "-",
    "doc_gas": 18,
    "doc_description": "Similar to `UNTIL`, but executes the current continuation `cc` in a loop. When the loop exit condition is satisfied, performs a `RET`."
  },
  {
    "name": "WHILE",
    "alias_of": "",
    "tlb": "#E8",
    "doc_category": "cont_loops",
    "doc_opcode": "E8",
    "doc_fift": "WHILE",
    "doc_stack": "c' c -",
    "doc_gas": 18,
    "doc_description": "Executes `c'` and pops an integer `x` from the resulting stack. If `x` is zero, exists the loop and transfers control to the original `cc`. If `x` is non-zero, executes `c`, and then begins a new iteration."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E8",
    "doc_fift": "WHILE:<{ cond }>DO<{ code }>",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ cond }> CONT` `<{ code }> CONT` `WHILE`."
  },
  {
    "name": "WHILEEND",
    "alias_of": "",
    "tlb": "#E9",
    "doc_category": "cont_loops",
    "doc_opcode": "E9",
    "doc_fift": "WHILEEND",
    "doc_stack": "c' -",
    "doc_gas": 18,
    "doc_description": "Similar to `WHILE`, but uses the current continuation `cc` as the loop body."
  },
  {
    "name": "AGAIN",
    "alias_of": "",
    "tlb": "#EA",
    "doc_category": "cont_loops",
    "doc_opcode": "EA",
    "doc_fift": "AGAIN",
    "doc_stack": "c -",
    "doc_gas": 18,
    "doc_description": "Similar to `REPEAT`, but executes `c` infinitely many times. A `RET` only begins a new iteration of the infinite loop, which can be exited only by an exception, or a `RETALT` (or an explicit `JMPX`)."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "EA",
    "doc_fift": "AGAIN:<{ code }>\n<{ code }>AGAIN",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `AGAIN`."
  },
  {
    "name": "AGAINEND",
    "alias_of": "",
    "tlb": "#EB",
    "doc_category": "cont_loops",
    "doc_opcode": "EB",
    "doc_fift": "AGAINEND\nAGAIN:",
    "doc_stack": "-",
    "doc_gas": 18,
    "doc_description": "Similar to `AGAIN`, but performed with respect to the current continuation `cc`."
  },
  {
    "name": "REPEATBRK",
    "alias_of": "",
    "tlb": "#E314",
    "doc_category": "cont_loops",
    "doc_opcode": "E314",
    "doc_fift": "REPEATBRK",
    "doc_stack": "n c -",
    "doc_gas": 26,
    "doc_description": "Similar to `REPEAT`, but also sets `c1` to the original `cc` after saving the old value of `c1` into the savelist of the original `cc`. In this way `RETALT` could be used to break out of the loop body."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E314",
    "doc_fift": "REPEATBRK:<{ code }>\n<{ code }>REPEATBRK",
    "doc_stack": "n -",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `REPEATBRK`."
  },
  {
    "name": "REPEATENDBRK",
    "alias_of": "",
    "tlb": "#E315",
    "doc_category": "cont_loops",
    "doc_opcode": "E315",
    "doc_fift": "REPEATENDBRK",
    "doc_stack": "n -",
    "doc_gas": 26,
    "doc_description": "Similar to `REPEATEND`, but also sets `c1` to the original `c0` after saving the old value of `c1` into the savelist of the original `c0`. Equivalent to `SAMEALTSAVE` `REPEATEND`."
  },
  {
    "name": "UNTILBRK",
    "alias_of": "",
    "tlb": "#E316",
    "doc_category": "cont_loops",
    "doc_opcode": "E316",
    "doc_fift": "UNTILBRK",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Similar to `UNTIL`, but also modifies `c1` in the same way as `REPEATBRK`."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E316",
    "doc_fift": "UNTILBRK:<{ code }>",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `UNTILBRK`."
  },
  {
    "name": "UNTILENDBRK",
    "alias_of": "",
    "tlb": "#E317",
    "doc_category": "cont_loops",
    "doc_opcode": "E317",
    "doc_fift": "UNTILENDBRK\nUNTILBRK:",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SAMEALTSAVE` `UNTILEND`."
  },
  {
    "name": "WHILEBRK",
    "alias_of": "",
    "tlb": "#E318",
    "doc_category": "cont_loops",
    "doc_opcode": "E318",
    "doc_fift": "WHILEBRK",
    "doc_stack": "c' c -",
    "doc_gas": 26,
    "doc_description": "Similar to `WHILE`, but also modifies `c1` in the same way as `REPEATBRK`."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E318",
    "doc_fift": "WHILEBRK:<{ cond }>DO<{ code }>",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ cond }> CONT` `<{ code }> CONT` `WHILEBRK`."
  },
  {
    "name": "WHILEENDBRK",
    "alias_of": "",
    "tlb": "#E319",
    "doc_category": "cont_loops",
    "doc_opcode": "E319",
    "doc_fift": "WHILEENDBRK",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SAMEALTSAVE` `WHILEEND`."
  },
  {
    "name": "AGAINBRK",
    "alias_of": "",
    "tlb": "#E31A",
    "doc_category": "cont_loops",
    "doc_opcode": "E31A",
    "doc_fift": "AGAINBRK",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Similar to `AGAIN`, but also modifies `c1` in the same way as `REPEATBRK`."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_loops",
    "doc_opcode": "E31A",
    "doc_fift": "AGAINBRK:<{ code }>",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `AGAINBRK`."
  },
  {
    "name": "AGAINENDBRK",
    "alias_of": "",
    "tlb": "#E31B",
    "doc_category": "cont_loops",
    "doc_opcode": "E31B",
    "doc_fift": "AGAINENDBRK\nAGAINBRK:",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SAMEALTSAVE` `AGAINEND`."
  },
  {
    "name": "PUSHCTR",
    "alias_of": "",
    "tlb": "#ED4 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED4i",
    "doc_fift": "c[i] PUSHCTR\nc[i] PUSH",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Pushes the current value of control register `c(i)`. If the control register is not supported in the current codepage, or if it does not have a value, an exception is triggered."
  },
  {
    "name": "PUSHROOT",
    "alias_of": "PUSHCTR",
    "tlb": "#ED44",
    "doc_category": "cont_registers",
    "doc_opcode": "ED44",
    "doc_fift": "c4 PUSHCTR\nc4 PUSH",
    "doc_stack": "- x",
    "doc_gas": 26,
    "doc_description": "Pushes the “global data root'' cell reference, thus enabling access to persistent smart-contract data."
  },
  {
    "name": "POPCTR",
    "alias_of": "",
    "tlb": "#ED5 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED5i",
    "doc_fift": "c[i] POPCTR\nc[i] POP",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Pops a value `x` from the stack and stores it into control register `c(i)`, if supported in the current codepage. Notice that if a control register accepts only values of a specific type, a type-checking exception may occur."
  },
  {
    "name": "POPROOT",
    "alias_of": "POPCTR",
    "tlb": "#ED54",
    "doc_category": "cont_registers",
    "doc_opcode": "ED54",
    "doc_fift": "c4 POPCTR\nc4 POP",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Sets the “global data root'' cell reference, thus allowing modification of persistent smart-contract data."
  },
  {
    "name": "SETCONTCTR",
    "alias_of": "",
    "tlb": "#ED6 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED6i",
    "doc_fift": "c[i] SETCONT\nc[i] SETCONTCTR",
    "doc_stack": "x c - c'",
    "doc_gas": 26,
    "doc_description": "Stores `x` into the savelist of continuation `c` as `c(i)`, and returns the resulting continuation `c'`. Almost all operations with continuations may be expressed in terms of `SETCONTCTR`, `POPCTR`, and `PUSHCTR`."
  },
  {
    "name": "SETRETCTR",
    "alias_of": "",
    "tlb": "#ED7 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED7i",
    "doc_fift": "c[i] SETRETCTR",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Equivalent to `c0 PUSHCTR` `c[i] SETCONTCTR` `c0 POPCTR`."
  },
  {
    "name": "SETALTCTR",
    "alias_of": "",
    "tlb": "#ED8 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED8i",
    "doc_fift": "c[i] SETALTCTR",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Equivalent to `c1 PUSHCTR` `c[i] SETCONTCTR` `c1 POPCTR`."
  },
  {
    "name": "POPSAVE",
    "alias_of": "",
    "tlb": "#ED9 i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "ED9i",
    "doc_fift": "c[i] POPSAVE\nc[i] POPCTRSAVE",
    "doc_stack": "x -",
    "doc_gas": 26,
    "doc_description": "Similar to `c[i] POPCTR`, but also saves the old value of `c[i]` into continuation `c0`.\nEquivalent (up to exceptions) to `c[i] SAVECTR` `c[i] POPCTR`."
  },
  {
    "name": "SAVE",
    "alias_of": "",
    "tlb": "#EDA i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDAi",
    "doc_fift": "c[i] SAVE\nc[i] SAVECTR",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Saves the current value of `c(i)` into the savelist of continuation `c0`. If an entry for `c[i]` is already present in the savelist of `c0`, nothing is done. Equivalent to `c[i] PUSHCTR` `c[i] SETRETCTR`."
  },
  {
    "name": "SAVEALT",
    "alias_of": "",
    "tlb": "#EDB i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDBi",
    "doc_fift": "c[i] SAVEALT\nc[i] SAVEALTCTR",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Similar to `c[i] SAVE`, but saves the current value of `c[i]` into the savelist of `c1`, not `c0`."
  },
  {
    "name": "SAVEBOTH",
    "alias_of": "",
    "tlb": "#EDC i:uint4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDCi",
    "doc_fift": "c[i] SAVEBOTH\nc[i] SAVEBOTHCTR",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "Equivalent to `c[i] SAVE` `c[i] SAVEALT`."
  },
  {
    "name": "PUSHCTRX",
    "alias_of": "",
    "tlb": "#EDE0",
    "doc_category": "cont_registers",
    "doc_opcode": "EDE0",
    "doc_fift": "PUSHCTRX",
    "doc_stack": "i - x",
    "doc_gas": 26,
    "doc_description": "Similar to `c[i] PUSHCTR`, but with `i`, `0 <= i <= 255`, taken from the stack.\nNotice that this primitive is one of the few “exotic'' primitives, which are not polymorphic like stack manipulation primitives, and at the same time do not have well-defined types of parameters and return values, because the type of `x` depends on `i`."
  },
  {
    "name": "POPCTRX",
    "alias_of": "",
    "tlb": "#EDE1",
    "doc_category": "cont_registers",
    "doc_opcode": "EDE1",
    "doc_fift": "POPCTRX",
    "doc_stack": "x i -",
    "doc_gas": 26,
    "doc_description": "Similar to `c[i] POPCTR`, but with `0 <= i <= 255` from the stack."
  },
  {
    "name": "SETCONTCTRX",
    "alias_of": "",
    "tlb": "#EDE2",
    "doc_category": "cont_registers",
    "doc_opcode": "EDE2",
    "doc_fift": "SETCONTCTRX",
    "doc_stack": "x c i - c'",
    "doc_gas": 26,
    "doc_description": "Similar to `c[i] SETCONTCTR`, but with `0 <= i <= 255` from the stack."
  },
  {
    "name": "COMPOS",
    "alias_of": "",
    "tlb": "#EDF0",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF0",
    "doc_fift": "COMPOS\nBOOLAND",
    "doc_stack": "c c' - c''",
    "doc_gas": 26,
    "doc_description": "Computes the composition `compose0(c, c’)`, which has the meaning of “perform `c`, and, if successful, perform `c'`'' (if `c` is a boolean circuit) or simply “perform `c`, then `c'`''. Equivalent to `SWAP` `c0 SETCONT`."
  },
  {
    "name": "COMPOSALT",
    "alias_of": "",
    "tlb": "#EDF1",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF1",
    "doc_fift": "COMPOSALT\nBOOLOR",
    "doc_stack": "c c' - c''",
    "doc_gas": 26,
    "doc_description": "Computes the alternative composition `compose1(c, c’)`, which has the meaning of “perform `c`, and, if not successful, perform `c'`'' (if `c` is a boolean circuit). Equivalent to `SWAP` `c1 SETCONT`."
  },
  {
    "name": "COMPOSBOTH",
    "alias_of": "",
    "tlb": "#EDF2",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF2",
    "doc_fift": "COMPOSBOTH",
    "doc_stack": "c c' - c''",
    "doc_gas": 26,
    "doc_description": "Computes composition `compose1(compose0(c, c’), c’)`, which has the meaning of “compute boolean circuit `c`, then compute `c'`, regardless of the result of `c`''."
  },
  {
    "name": "ATEXIT",
    "alias_of": "",
    "tlb": "#EDF3",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF3",
    "doc_fift": "ATEXIT",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Sets `c0` to `compose0(c, c0)`. In other words, `c` will be executed before exiting current subroutine."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF3",
    "doc_fift": "ATEXIT:<{ code }>\n<{ code }>ATEXIT",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `ATEXIT`."
  },
  {
    "name": "ATEXITALT",
    "alias_of": "",
    "tlb": "#EDF4",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF4",
    "doc_fift": "ATEXITALT",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `compose1(c, c1)`. In other words, `c` will be executed before exiting current subroutine by its alternative return path."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF4",
    "doc_fift": "ATEXITALT:<{ code }>\n<{ code }>ATEXITALT",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code }> CONT` `ATEXITALT`."
  },
  {
    "name": "SETEXITALT",
    "alias_of": "",
    "tlb": "#EDF5",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF5",
    "doc_fift": "SETEXITALT",
    "doc_stack": "c -",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `compose1(compose0(c, c0), c1)`,\nIn this way, a subsequent `RETALT` will first execute `c`, then transfer control to the original `c0`. This can be used, for instance, to exit from nested loops."
  },
  {
    "name": "THENRET",
    "alias_of": "",
    "tlb": "#EDF6",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF6",
    "doc_fift": "THENRET",
    "doc_stack": "c - c'",
    "doc_gas": 26,
    "doc_description": "Computes `compose0(c, c0)`."
  },
  {
    "name": "THENRETALT",
    "alias_of": "",
    "tlb": "#EDF7",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF7",
    "doc_fift": "THENRETALT",
    "doc_stack": "c - c'",
    "doc_gas": 26,
    "doc_description": "Computes `compose0(c, c1)`"
  },
  {
    "name": "INVERT",
    "alias_of": "",
    "tlb": "#EDF8",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF8",
    "doc_fift": "INVERT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Interchanges `c0` and `c1`."
  },
  {
    "name": "BOOLEVAL",
    "alias_of": "",
    "tlb": "#EDF9",
    "doc_category": "cont_registers",
    "doc_opcode": "EDF9",
    "doc_fift": "BOOLEVAL",
    "doc_stack": "c - ?",
    "doc_gas": 26,
    "doc_description": "Performs `cc:=compose1(compose0(c, compose0(-1 PUSHINT, cc)), compose0(0 PUSHINT, cc))`. If `c` represents a boolean circuit, the net effect is to evaluate it and push either `-1` or `0` into the stack before continuing."
  },
  {
    "name": "SAMEALT",
    "alias_of": "",
    "tlb": "#EDFA",
    "doc_category": "cont_registers",
    "doc_opcode": "EDFA",
    "doc_fift": "SAMEALT",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `c0`. Equivalent to `c0 PUSHCTR` `c1 POPCTR`."
  },
  {
    "name": "SAMEALTSAVE",
    "alias_of": "",
    "tlb": "#EDFB",
    "doc_category": "cont_registers",
    "doc_opcode": "EDFB",
    "doc_fift": "SAMEALTSAVE",
    "doc_stack": "-",
    "doc_gas": 26,
    "doc_description": "Sets `c1` to `c0`, but first saves the old value of `c1` into the savelist of `c0`.\nEquivalent to `c1 SAVE` `SAMEALT`."
  },
  {
    "name": "SETCONTARGS_N",
    "alias_of": "",
    "tlb": "#EC r:uint4 n:(#<= 14)",
    "doc_category": "cont_stack",
    "doc_opcode": "ECrn",
    "doc_fift": "[r] [n] SETCONTARGS",
    "doc_stack": "x_1 x_2...x_r c - c'",
    "doc_gas": "26+s”",
    "doc_description": "Similar to `[r] -1 SETCONTARGS`, but sets `c.nargs` to the final size of the stack of `c'` plus `n`. In other words, transforms `c` into a _closure_ or a _partially applied function_, with `0 <= n <= 14` arguments missing."
  },
  {
    "name": "SETNUMARGS",
    "alias_of": "SETCONTARGS_N",
    "tlb": "#EC0 n:(#<= 14)",
    "doc_category": "cont_stack",
    "doc_opcode": "EC0n",
    "doc_fift": "[n] SETNUMARGS",
    "doc_stack": "c - c'",
    "doc_gas": 26,
    "doc_description": "Sets `c.nargs` to `n` plus the current depth of `c`'s stack, where `0 <= n <= 14`. If `c.nargs` is already set to a non-negative value, does nothing."
  },
  {
    "name": "SETCONTARGS",
    "alias_of": "",
    "tlb": "#EC r:uint4 n:(## 4) {n = 15}",
    "doc_category": "cont_stack",
    "doc_opcode": "ECrF",
    "doc_fift": "[r] -1 SETCONTARGS",
    "doc_stack": "x_1 x_2...x_r c - c'",
    "doc_gas": "26+s”",
    "doc_description": "Pushes `0 <= r <= 15` values `x_1...x_r` into the stack of (a copy of) the continuation `c`, starting with `x_1`. If the final depth of `c`'s stack turns out to be greater than `c.nargs`, a stack overflow exception is generated."
  },
  {
    "name": "RETURNARGS",
    "alias_of": "",
    "tlb": "#ED0 p:uint4",
    "doc_category": "cont_stack",
    "doc_opcode": "ED0p",
    "doc_fift": "[p] RETURNARGS",
    "doc_stack": "-",
    "doc_gas": "26+s”",
    "doc_description": "Leaves only the top `0 <= p <= 15` values in the current stack (somewhat similarly to `ONLYTOPX`), with all the unused bottom values not discarded, but saved into continuation `c0` in the same way as `SETCONTARGS` does."
  },
  {
    "name": "RETURNVARARGS",
    "alias_of": "",
    "tlb": "#ED10",
    "doc_category": "cont_stack",
    "doc_opcode": "ED10",
    "doc_fift": "RETURNVARARGS",
    "doc_stack": "p -",
    "doc_gas": "26+s”",
    "doc_description": "Similar to `RETURNARGS`, but with Integer `0 <= p <= 255` taken from the stack."
  },
  {
    "name": "SETCONTVARARGS",
    "alias_of": "",
    "tlb": "#ED11",
    "doc_category": "cont_stack",
    "doc_opcode": "ED11",
    "doc_fift": "SETCONTVARARGS",
    "doc_stack": "x_1 x_2...x_r c r n - c'",
    "doc_gas": "26+s”",
    "doc_description": "Similar to `SETCONTARGS`, but with `0 <= r <= 255` and `-1 <= n <= 255` taken from the stack."
  },
  {
    "name": "SETNUMVARARGS",
    "alias_of": "",
    "tlb": "#ED12",
    "doc_category": "cont_stack",
    "doc_opcode": "ED12",
    "doc_fift": "SETNUMVARARGS",
    "doc_stack": "c n - c'",
    "doc_gas": 26,
    "doc_description": "`-1 <= n <= 255`\nIf `n=-1`, this operation does nothing (`c'=c`).\nOtherwise its action is similar to `[n] SETNUMARGS`, but with `n` taken from the stack."
  },
  {
    "name": "RUNVM",
    "alias_of": "",
    "tlb": "#DB4 flags:(## 12)",
    "doc_category": "cont_basic",
    "doc_opcode": "DB4fff",
    "doc_fift": "RUNVM",
    "doc_stack": "x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x'_1 ... x'_m exitcode [data'] [c4'] [c5] [g_c]",
    "doc_gas": "66+x",
    "doc_description": "Runs child VM with code `code` and stack `x_1...x_n`. Returns the resulting stack `x'_1...x'_m` and exitcode. Other arguments and return values are enabled by flags."
  },
  {
    "name": "RUNVMX",
    "alias_of": "",
    "tlb": "#DB50",
    "doc_category": "cont_basic",
    "doc_opcode": "DB50",
    "doc_fift": "RUNVMX",
    "doc_stack": "x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] flags - x'_1 ... x'_m exitcode [data'] [c4'] [c5] [g_c]",
    "doc_gas": "66+x",
    "doc_description": "Same as `RUNVM`, but pops flags from stack."
  }
]
