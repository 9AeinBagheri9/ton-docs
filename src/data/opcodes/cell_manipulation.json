[
  {
    "name": "NEWC",
    "alias_of": "",
    "tlb": "#C8",
    "doc_category": "cell_build",
    "doc_opcode": "C8",
    "doc_fift": "NEWC",
    "doc_stack": "- b",
    "doc_gas": 18,
    "doc_description": "Creates a new empty _Builder_."
  },
  {
    "name": "ENDC",
    "alias_of": "",
    "tlb": "#C9",
    "doc_category": "cell_build",
    "doc_opcode": "C9",
    "doc_fift": "ENDC",
    "doc_stack": "b - c",
    "doc_gas": 518,
    "doc_description": "Converts a _Builder_ into an ordinary _Cell_."
  },
  {
    "name": "STI",
    "alias_of": "",
    "tlb": "#CA cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CAcc",
    "doc_fift": "[cc+1] STI",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `cc+1`-bit integer `x` into _Builder_ `b` for `0 <= cc <= 255`, throws a range check exception if `x` does not fit into `cc+1` bits."
  },
  {
    "name": "STU",
    "alias_of": "",
    "tlb": "#CB cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CBcc",
    "doc_fift": "[cc+1] STU",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `cc+1`-bit integer `x` into _Builder_ `b`. In all other respects it is similar to `STI`."
  },
  {
    "name": "STREF",
    "alias_of": "",
    "tlb": "#CC",
    "doc_category": "cell_build",
    "doc_opcode": "CC",
    "doc_fift": "STREF",
    "doc_stack": "c b - b'",
    "doc_gas": 18,
    "doc_description": "Stores a reference to _Cell_ `c` into _Builder_ `b`."
  },
  {
    "name": "STBREFR",
    "alias_of": "",
    "tlb": "#CD",
    "doc_category": "cell_build",
    "doc_opcode": "CD",
    "doc_fift": "STBREFR\nENDCST",
    "doc_stack": "b b'' - b",
    "doc_gas": 518,
    "doc_description": "Equivalent to `ENDC` `SWAP` `STREF`."
  },
  {
    "name": "STSLICE",
    "alias_of": "",
    "tlb": "#CE",
    "doc_category": "cell_build",
    "doc_opcode": "CE",
    "doc_fift": "STSLICE",
    "doc_stack": "s b - b'",
    "doc_gas": 18,
    "doc_description": "Stores _Slice_ `s` into _Builder_ `b`."
  },
  {
    "name": "STIX",
    "alias_of": "",
    "tlb": "#CF00",
    "doc_category": "cell_build",
    "doc_opcode": "CF00",
    "doc_fift": "STIX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores a signed `l`-bit integer `x` into `b` for `0 <= l <= 257`."
  },
  {
    "name": "STUX",
    "alias_of": "",
    "tlb": "#CF01",
    "doc_category": "cell_build",
    "doc_opcode": "CF01",
    "doc_fift": "STUX",
    "doc_stack": "x b l - b'",
    "doc_gas": 26,
    "doc_description": "Stores an unsigned `l`-bit integer `x` into `b` for `0 <= l <= 256`."
  },
  {
    "name": "STIXR",
    "alias_of": "",
    "tlb": "#CF02",
    "doc_category": "cell_build",
    "doc_opcode": "CF02",
    "doc_fift": "STIXR",
    "doc_stack": "b x l - b'",
    "doc_gas": 26,
    "doc_description": "Similar to `STIX`, but with arguments in a different order."
  },
  {
    "name": "STUXR",
    "alias_of": "",
    "tlb": "#CF03",
    "doc_category": "cell_build",
    "doc_opcode": "CF03",
    "doc_fift": "STUXR",
    "doc_stack": "b x l - b'",
    "doc_gas": 26,
    "doc_description": "Similar to `STUX`, but with arguments in a different order."
  },
  {
    "name": "STIXQ",
    "alias_of": "",
    "tlb": "#CF04",
    "doc_category": "cell_build",
    "doc_opcode": "CF04",
    "doc_fift": "STIXQ",
    "doc_stack": "x b l - x b f or b' 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `STIX`. If there is no space in `b`, sets `b'=b` and `f=-1`.\nIf `x` does not fit into `l` bits, sets `b'=b` and `f=1`.\nIf the operation succeeds, `b'` is the new _Builder_ and `f=0`.\nHowever, `0 <= l <= 257`, with a range check exception if this is not so."
  },
  {
    "name": "STUXQ",
    "alias_of": "",
    "tlb": "#CF05",
    "doc_category": "cell_build",
    "doc_opcode": "CF05",
    "doc_fift": "STUXQ",
    "doc_stack": "x b l - x b f or b' 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `STUX`."
  },
  {
    "name": "STIXRQ",
    "alias_of": "",
    "tlb": "#CF06",
    "doc_category": "cell_build",
    "doc_opcode": "CF06",
    "doc_fift": "STIXRQ",
    "doc_stack": "b x l - b x f or b' 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `STIXR`."
  },
  {
    "name": "STUXRQ",
    "alias_of": "",
    "tlb": "#CF07",
    "doc_category": "cell_build",
    "doc_opcode": "CF07",
    "doc_fift": "STUXRQ",
    "doc_stack": "b x l - b x f or b' 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `STUXR`."
  },
  {
    "name": "STI_ALT",
    "alias_of": "",
    "tlb": "#CF08 cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF08cc",
    "doc_fift": "[cc+1] STI_l",
    "doc_stack": "x b - b'",
    "doc_gas": 34,
    "doc_description": "A longer version of `[cc+1] STI`."
  },
  {
    "name": "STU_ALT",
    "alias_of": "",
    "tlb": "#CF09 cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF09cc",
    "doc_fift": "[cc+1] STU_l",
    "doc_stack": "x b - b'",
    "doc_gas": 34,
    "doc_description": "A longer version of `[cc+1] STU`."
  },
  {
    "name": "STIR",
    "alias_of": "",
    "tlb": "#CF0A cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Acc",
    "doc_fift": "[cc+1] STIR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STI`."
  },
  {
    "name": "STUR",
    "alias_of": "",
    "tlb": "#CF0B cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Bcc",
    "doc_fift": "[cc+1] STUR",
    "doc_stack": "b x - b'",
    "doc_gas": 34,
    "doc_description": "Equivalent to `SWAP` `[cc+1] STU`."
  },
  {
    "name": "STIQ",
    "alias_of": "",
    "tlb": "#CF0C cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Ccc",
    "doc_fift": "[cc+1] STIQ",
    "doc_stack": "x b - x b f or b' 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `STI`."
  },
  {
    "name": "STUQ",
    "alias_of": "",
    "tlb": "#CF0D cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Dcc",
    "doc_fift": "[cc+1] STUQ",
    "doc_stack": "x b - x b f or b' 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `STU`."
  },
  {
    "name": "STIRQ",
    "alias_of": "",
    "tlb": "#CF0E cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Ecc",
    "doc_fift": "[cc+1] STIRQ",
    "doc_stack": "b x - b x f or b' 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `STIR`."
  },
  {
    "name": "STURQ",
    "alias_of": "",
    "tlb": "#CF0F cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF0Fcc",
    "doc_fift": "[cc+1] STURQ",
    "doc_stack": "b x - b x f or b' 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `STUR`."
  },
  {
    "name": "STREF_ALT",
    "alias_of": "",
    "tlb": "#CF10",
    "doc_category": "cell_build",
    "doc_opcode": "CF10",
    "doc_fift": "STREF_l",
    "doc_stack": "c b - b'",
    "doc_gas": 26,
    "doc_description": "A longer version of `STREF`."
  },
  {
    "name": "STBREF",
    "alias_of": "",
    "tlb": "#CF11",
    "doc_category": "cell_build",
    "doc_opcode": "CF11",
    "doc_fift": "STBREF",
    "doc_stack": "b' b - b''",
    "doc_gas": 526,
    "doc_description": "Equivalent to `SWAP` `STBREFR`."
  },
  {
    "name": "STSLICE_ALT",
    "alias_of": "",
    "tlb": "#CF12",
    "doc_category": "cell_build",
    "doc_opcode": "CF12",
    "doc_fift": "STSLICE_l",
    "doc_stack": "s b - b'",
    "doc_gas": 26,
    "doc_description": "A longer version of `STSLICE`."
  },
  {
    "name": "STB",
    "alias_of": "",
    "tlb": "#CF13",
    "doc_category": "cell_build",
    "doc_opcode": "CF13",
    "doc_fift": "STB",
    "doc_stack": "b' b - b''",
    "doc_gas": 26,
    "doc_description": "Appends all data from _Builder_ `b'` to _Builder_ `b`."
  },
  {
    "name": "STREFR",
    "alias_of": "",
    "tlb": "#CF14",
    "doc_category": "cell_build",
    "doc_opcode": "CF14",
    "doc_fift": "STREFR",
    "doc_stack": "b c - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STREF`."
  },
  {
    "name": "STBREFR_ALT",
    "alias_of": "",
    "tlb": "#CF15",
    "doc_category": "cell_build",
    "doc_opcode": "CF15",
    "doc_fift": "STBREFR_l",
    "doc_stack": "b b' - b''",
    "doc_gas": 526,
    "doc_description": "A longer encoding of `STBREFR`."
  },
  {
    "name": "STSLICER",
    "alias_of": "",
    "tlb": "#CF16",
    "doc_category": "cell_build",
    "doc_opcode": "CF16",
    "doc_fift": "STSLICER",
    "doc_stack": "b s - b'",
    "doc_gas": 26,
    "doc_description": "Equivalent to `SWAP` `STSLICE`."
  },
  {
    "name": "STBR",
    "alias_of": "",
    "tlb": "#CF17",
    "doc_category": "cell_build",
    "doc_opcode": "CF17",
    "doc_fift": "STBR\nBCONCAT",
    "doc_stack": "b b' - b''",
    "doc_gas": 26,
    "doc_description": "Concatenates two builders.\nEquivalent to `SWAP` `STB`."
  },
  {
    "name": "STREFQ",
    "alias_of": "",
    "tlb": "#CF18",
    "doc_category": "cell_build",
    "doc_opcode": "CF18",
    "doc_fift": "STREFQ",
    "doc_stack": "c b - c b -1 or b' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STREF`."
  },
  {
    "name": "STBREFQ",
    "alias_of": "",
    "tlb": "#CF19",
    "doc_category": "cell_build",
    "doc_opcode": "CF19",
    "doc_fift": "STBREFQ",
    "doc_stack": "b' b - b' b -1 or b'' 0",
    "doc_gas": 526,
    "doc_description": "Quiet version of `STBREF`."
  },
  {
    "name": "STSLICEQ",
    "alias_of": "",
    "tlb": "#CF1A",
    "doc_category": "cell_build",
    "doc_opcode": "CF1A",
    "doc_fift": "STSLICEQ",
    "doc_stack": "s b - s b -1 or b' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STSLICE`."
  },
  {
    "name": "STBQ",
    "alias_of": "",
    "tlb": "#CF1B",
    "doc_category": "cell_build",
    "doc_opcode": "CF1B",
    "doc_fift": "STBQ",
    "doc_stack": "b' b - b' b -1 or b'' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STB`."
  },
  {
    "name": "STREFRQ",
    "alias_of": "",
    "tlb": "#CF1C",
    "doc_category": "cell_build",
    "doc_opcode": "CF1C",
    "doc_fift": "STREFRQ",
    "doc_stack": "b c - b c -1 or b' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STREFR`."
  },
  {
    "name": "STBREFRQ",
    "alias_of": "",
    "tlb": "#CF1D",
    "doc_category": "cell_build",
    "doc_opcode": "CF1D",
    "doc_fift": "STBREFRQ",
    "doc_stack": "b b' - b b' -1 or b'' 0",
    "doc_gas": 526,
    "doc_description": "Quiet version of `STBREFR`."
  },
  {
    "name": "STSLICERQ",
    "alias_of": "",
    "tlb": "#CF1E",
    "doc_category": "cell_build",
    "doc_opcode": "CF1E",
    "doc_fift": "STSLICERQ",
    "doc_stack": "b s - b s -1 or b'' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STSLICER`."
  },
  {
    "name": "STBRQ",
    "alias_of": "",
    "tlb": "#CF1F",
    "doc_category": "cell_build",
    "doc_opcode": "CF1F",
    "doc_fift": "STBRQ\nBCONCATQ",
    "doc_stack": "b b' - b b' -1 or b'' 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `STBR`."
  },
  {
    "name": "STREFCONST",
    "alias_of": "",
    "tlb": "#CF20 c:^Cell",
    "doc_category": "cell_build",
    "doc_opcode": "CF20",
    "doc_fift": "[ref] STREFCONST",
    "doc_stack": "b - b’",
    "doc_gas": 26,
    "doc_description": "Equivalent to `PUSHREF` `STREFR`."
  },
  {
    "name": "STREF2CONST",
    "alias_of": "",
    "tlb": "#CF21 c1:^Cell c2:^Cell",
    "doc_category": "cell_build",
    "doc_opcode": "CF21",
    "doc_fift": "[ref] [ref] STREF2CONST",
    "doc_stack": "b - b’",
    "doc_gas": 26,
    "doc_description": "Equivalent to `STREFCONST` `STREFCONST`."
  },
  {
    "name": "ENDXC",
    "alias_of": "",
    "tlb": "#CF23",
    "doc_category": "cell_build",
    "doc_opcode": "CF23",
    "doc_fift": "",
    "doc_stack": "b x - c",
    "doc_gas": 526,
    "doc_description": "If `x!=0`, creates a _special_ or _exotic_ cell from _Builder_ `b`.\nThe type of the exotic cell must be stored in the first 8 bits of `b`.\nIf `x=0`, it is equivalent to `ENDC`. Otherwise some validity checks on the data and references of `b` are performed before creating the exotic cell."
  },
  {
    "name": "STILE4",
    "alias_of": "",
    "tlb": "#CF28",
    "doc_category": "cell_build",
    "doc_opcode": "CF28",
    "doc_fift": "STILE4",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian signed 32-bit integer."
  },
  {
    "name": "STULE4",
    "alias_of": "",
    "tlb": "#CF29",
    "doc_category": "cell_build",
    "doc_opcode": "CF29",
    "doc_fift": "STULE4",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian unsigned 32-bit integer."
  },
  {
    "name": "STILE8",
    "alias_of": "",
    "tlb": "#CF2A",
    "doc_category": "cell_build",
    "doc_opcode": "CF2A",
    "doc_fift": "STILE8",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian signed 64-bit integer."
  },
  {
    "name": "STULE8",
    "alias_of": "",
    "tlb": "#CF2B",
    "doc_category": "cell_build",
    "doc_opcode": "CF2B",
    "doc_fift": "STULE8",
    "doc_stack": "x b - b'",
    "doc_gas": 26,
    "doc_description": "Stores a little-endian unsigned 64-bit integer."
  },
  {
    "name": "BDEPTH",
    "alias_of": "",
    "tlb": "#CF30",
    "doc_category": "cell_build",
    "doc_opcode": "CF30",
    "doc_fift": "BDEPTH",
    "doc_stack": "b - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Builder_ `b`. If no cell references are stored in `b`, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `b`."
  },
  {
    "name": "BBITS",
    "alias_of": "",
    "tlb": "#CF31",
    "doc_category": "cell_build",
    "doc_opcode": "CF31",
    "doc_fift": "BBITS",
    "doc_stack": "b - x",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits already stored in _Builder_ `b`."
  },
  {
    "name": "BREFS",
    "alias_of": "",
    "tlb": "#CF32",
    "doc_category": "cell_build",
    "doc_opcode": "CF32",
    "doc_fift": "BREFS",
    "doc_stack": "b - y",
    "doc_gas": 26,
    "doc_description": "Returns the number of cell references already stored in `b`."
  },
  {
    "name": "BBITREFS",
    "alias_of": "",
    "tlb": "#CF33",
    "doc_category": "cell_build",
    "doc_opcode": "CF33",
    "doc_fift": "BBITREFS",
    "doc_stack": "b - x y",
    "doc_gas": 26,
    "doc_description": "Returns the numbers of both data bits and cell references in `b`."
  },
  {
    "name": "BREMBITS",
    "alias_of": "",
    "tlb": "#CF35",
    "doc_category": "cell_build",
    "doc_opcode": "CF35",
    "doc_fift": "BREMBITS",
    "doc_stack": "b - x'",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits that can still be stored in `b`."
  },
  {
    "name": "BREMREFS",
    "alias_of": "",
    "tlb": "#CF36",
    "doc_category": "cell_build",
    "doc_opcode": "CF36",
    "doc_fift": "BREMREFS",
    "doc_stack": "b - y'",
    "doc_gas": 26,
    "doc_description": "Returns the number of references that can still be stored in `b`."
  },
  {
    "name": "BREMBITREFS",
    "alias_of": "",
    "tlb": "#CF37",
    "doc_category": "cell_build",
    "doc_opcode": "CF37",
    "doc_fift": "BREMBITREFS",
    "doc_stack": "b - x' y'",
    "doc_gas": 26,
    "doc_description": "Returns the numbers of both data bits and references that can still be stored in `b`."
  },
  {
    "name": "BCHKBITS",
    "alias_of": "",
    "tlb": "#CF38 cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF38cc",
    "doc_fift": "[cc+1] BCHKBITS#",
    "doc_stack": "b -",
    "doc_gas": "34/84",
    "doc_description": "Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`."
  },
  {
    "name": "BCHKBITS_VAR",
    "alias_of": "",
    "tlb": "#CF39",
    "doc_category": "cell_build",
    "doc_opcode": "CF39",
    "doc_fift": "BCHKBITS",
    "doc_stack": "b x -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`. If there is no space for `x` more bits in `b`, or if `x` is not within the range `0...1023`, throws an exception."
  },
  {
    "name": "BCHKREFS",
    "alias_of": "",
    "tlb": "#CF3A",
    "doc_category": "cell_build",
    "doc_opcode": "CF3A",
    "doc_fift": "BCHKREFS",
    "doc_stack": "b y -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `y` references can be stored into `b`, `0 <= y <= 7`."
  },
  {
    "name": "BCHKBITREFS",
    "alias_of": "",
    "tlb": "#CF3B",
    "doc_category": "cell_build",
    "doc_opcode": "CF3B",
    "doc_fift": "BCHKBITREFS",
    "doc_stack": "b x y -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`."
  },
  {
    "name": "BCHKBITSQ",
    "alias_of": "",
    "tlb": "#CF3C cc:uint8",
    "doc_category": "cell_build",
    "doc_opcode": "CF3Ccc",
    "doc_fift": "[cc+1] BCHKBITSQ#",
    "doc_stack": "b - ?",
    "doc_gas": 34,
    "doc_description": "Checks whether `cc+1` bits can be stored into `b`, where `0 <= cc <= 255`."
  },
  {
    "name": "BCHKBITSQ_VAR",
    "alias_of": "",
    "tlb": "#CF3D",
    "doc_category": "cell_build",
    "doc_opcode": "CF3D",
    "doc_fift": "BCHKBITSQ",
    "doc_stack": "b x - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `x` bits can be stored into `b`, `0 <= x <= 1023`."
  },
  {
    "name": "BCHKREFSQ",
    "alias_of": "",
    "tlb": "#CF3E",
    "doc_category": "cell_build",
    "doc_opcode": "CF3E",
    "doc_fift": "BCHKREFSQ",
    "doc_stack": "b y - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `y` references can be stored into `b`, `0 <= y <= 7`."
  },
  {
    "name": "BCHKBITREFSQ",
    "alias_of": "",
    "tlb": "#CF3F",
    "doc_category": "cell_build",
    "doc_opcode": "CF3F",
    "doc_fift": "BCHKBITREFSQ",
    "doc_stack": "b x y - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether `x` bits and `y` references can be stored into `b`, `0 <= x <= 1023`, `0 <= y <= 7`."
  },
  {
    "name": "STZEROES",
    "alias_of": "",
    "tlb": "#CF40",
    "doc_category": "cell_build",
    "doc_opcode": "CF40",
    "doc_fift": "STZEROES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary zeroes into _Builder_ `b`."
  },
  {
    "name": "STONES",
    "alias_of": "",
    "tlb": "#CF41",
    "doc_category": "cell_build",
    "doc_opcode": "CF41",
    "doc_fift": "STONES",
    "doc_stack": "b n - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary ones into _Builder_ `b`."
  },
  {
    "name": "STSAME",
    "alias_of": "",
    "tlb": "#CF42",
    "doc_category": "cell_build",
    "doc_opcode": "CF42",
    "doc_fift": "STSAME",
    "doc_stack": "b n x - b'",
    "doc_gas": 26,
    "doc_description": "Stores `n` binary `x`es (`0 <= x <= 1`) into _Builder_ `b`."
  },
  {
    "name": "STSLICECONST",
    "alias_of": "",
    "tlb": "#CFC0_ x:(## 2) y:(## 3) c:(x * ^Cell) sss:((8 * y + 2) * Bit)",
    "doc_category": "cell_build",
    "doc_opcode": "CFC0_xysss",
    "doc_fift": "[slice] STSLICECONST",
    "doc_stack": "b - b'",
    "doc_gas": 24,
    "doc_description": "Stores a constant subslice `sss`.\n_Details:_ `sss` consists of `0 <= x <= 3` references and up to `8y+2` data bits, with `0 <= y <= 7`. Completion bit is assumed.\nNote that the assembler can replace `STSLICECONST` with `PUSHSLICE` `STSLICER` if the slice is too big."
  },
  {
    "name": "STZERO",
    "alias_of": "STSLICECONST",
    "tlb": "#CF81",
    "doc_category": "cell_build",
    "doc_opcode": "CF81",
    "doc_fift": "STZERO",
    "doc_stack": "b - b'",
    "doc_gas": 24,
    "doc_description": "Stores one binary zero."
  },
  {
    "name": "STONE",
    "alias_of": "STSLICECONST",
    "tlb": "#CF83",
    "doc_category": "cell_build",
    "doc_opcode": "CF83",
    "doc_fift": "STONE",
    "doc_stack": "b - b'",
    "doc_gas": 24,
    "doc_description": "Stores one binary one."
  },
  {
    "name": "CTOS",
    "alias_of": "",
    "tlb": "#D0",
    "doc_category": "cell_parse",
    "doc_opcode": "D0",
    "doc_fift": "CTOS",
    "doc_stack": "c - s",
    "doc_gas": "118/43",
    "doc_description": "Converts a _Cell_ into a _Slice_. Notice that `c` must be either an ordinary cell, or an exotic cell which is automatically _loaded_ to yield an ordinary cell `c'`, converted into a _Slice_ afterwards."
  },
  {
    "name": "ENDS",
    "alias_of": "",
    "tlb": "#D1",
    "doc_category": "cell_parse",
    "doc_opcode": "D1",
    "doc_fift": "ENDS",
    "doc_stack": "s -",
    "doc_gas": "18/68",
    "doc_description": "Removes a _Slice_ `s` from the stack, and throws an exception if it is not empty."
  },
  {
    "name": "LDI",
    "alias_of": "",
    "tlb": "#D2 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D2cc",
    "doc_fift": "[cc+1] LDI",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads (i.e., parses) a signed `cc+1`-bit integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "LDU",
    "alias_of": "",
    "tlb": "#D3 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D3cc",
    "doc_fift": "[cc+1] LDU",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `cc+1`-bit integer `x` from _Slice_ `s`."
  },
  {
    "name": "LDREF",
    "alias_of": "",
    "tlb": "#D4",
    "doc_category": "cell_parse",
    "doc_opcode": "D4",
    "doc_fift": "LDREF",
    "doc_stack": "s - c s'",
    "doc_gas": 18,
    "doc_description": "Loads a cell reference `c` from `s`."
  },
  {
    "name": "LDREFRTOS",
    "alias_of": "",
    "tlb": "#D5",
    "doc_category": "cell_parse",
    "doc_opcode": "D5",
    "doc_fift": "LDREFRTOS",
    "doc_stack": "s - s' s''",
    "doc_gas": "118/43",
    "doc_description": "Equivalent to `LDREF` `SWAP` `CTOS`."
  },
  {
    "name": "LDSLICE",
    "alias_of": "",
    "tlb": "#D6 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D6cc",
    "doc_fift": "[cc+1] LDSLICE",
    "doc_stack": "s - s'' s'",
    "doc_gas": 26,
    "doc_description": "Cuts the next `cc+1` bits of `s` into a separate _Slice_ `s''`."
  },
  {
    "name": "LDIX",
    "alias_of": "",
    "tlb": "#D700",
    "doc_category": "cell_parse",
    "doc_opcode": "D700",
    "doc_fift": "LDIX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a signed `l`-bit (`0 <= l <= 257`) integer `x` from _Slice_ `s`, and returns the remainder of `s` as `s'`."
  },
  {
    "name": "LDUX",
    "alias_of": "",
    "tlb": "#D701",
    "doc_category": "cell_parse",
    "doc_opcode": "D701",
    "doc_fift": "LDUX",
    "doc_stack": "s l - x s'",
    "doc_gas": 26,
    "doc_description": "Loads an unsigned `l`-bit integer `x` from (the first `l` bits of) `s`, with `0 <= l <= 256`."
  },
  {
    "name": "PLDIX",
    "alias_of": "",
    "tlb": "#D702",
    "doc_category": "cell_parse",
    "doc_opcode": "D702",
    "doc_fift": "PLDIX",
    "doc_stack": "s l - x",
    "doc_gas": 26,
    "doc_description": "Preloads a signed `l`-bit integer from _Slice_ `s`, for `0 <= l <= 257`."
  },
  {
    "name": "PLDUX",
    "alias_of": "",
    "tlb": "#D703",
    "doc_category": "cell_parse",
    "doc_opcode": "D703",
    "doc_fift": "PLDUX",
    "doc_stack": "s l - x",
    "doc_gas": 26,
    "doc_description": "Preloads an unsigned `l`-bit integer from `s`, for `0 <= l <= 256`."
  },
  {
    "name": "LDIXQ",
    "alias_of": "",
    "tlb": "#D704",
    "doc_category": "cell_parse",
    "doc_opcode": "D704",
    "doc_fift": "LDIXQ",
    "doc_stack": "s l - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `LDIX`: loads a signed `l`-bit integer from `s` similarly to `LDIX`, but returns a success flag, equal to `-1` on success or to `0` on failure (if `s` does not have `l` bits), instead of throwing a cell underflow exception."
  },
  {
    "name": "LDUXQ",
    "alias_of": "",
    "tlb": "#D705",
    "doc_category": "cell_parse",
    "doc_opcode": "D705",
    "doc_fift": "LDUXQ",
    "doc_stack": "s l - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `LDUX`."
  },
  {
    "name": "PLDIXQ",
    "alias_of": "",
    "tlb": "#D706",
    "doc_category": "cell_parse",
    "doc_opcode": "D706",
    "doc_fift": "PLDIXQ",
    "doc_stack": "s l - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `PLDIX`."
  },
  {
    "name": "PLDUXQ",
    "alias_of": "",
    "tlb": "#D707",
    "doc_category": "cell_parse",
    "doc_opcode": "D707",
    "doc_fift": "PLDUXQ",
    "doc_stack": "s l - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quiet version of `PLDUX`."
  },
  {
    "name": "LDI_ALT",
    "alias_of": "",
    "tlb": "#D708 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D708cc",
    "doc_fift": "[cc+1] LDI_l",
    "doc_stack": "s - x s'",
    "doc_gas": 34,
    "doc_description": "A longer encoding for `LDI`."
  },
  {
    "name": "LDU_ALT",
    "alias_of": "",
    "tlb": "#D709 cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D709cc",
    "doc_fift": "[cc+1] LDU_l",
    "doc_stack": "s - x s'",
    "doc_gas": 34,
    "doc_description": "A longer encoding for `LDU`."
  },
  {
    "name": "PLDI",
    "alias_of": "",
    "tlb": "#D70A cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Acc",
    "doc_fift": "[cc+1] PLDI",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads a signed `cc+1`-bit integer from _Slice_ `s`."
  },
  {
    "name": "PLDU",
    "alias_of": "",
    "tlb": "#D70B cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Bcc",
    "doc_fift": "[cc+1] PLDU",
    "doc_stack": "s - x",
    "doc_gas": 34,
    "doc_description": "Preloads an unsigned `cc+1`-bit integer from `s`."
  },
  {
    "name": "LDIQ",
    "alias_of": "",
    "tlb": "#D70C cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Ccc",
    "doc_fift": "[cc+1] LDIQ",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `LDI`."
  },
  {
    "name": "LDUQ",
    "alias_of": "",
    "tlb": "#D70D cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Dcc",
    "doc_fift": "[cc+1] LDUQ",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `LDU`."
  },
  {
    "name": "PLDIQ",
    "alias_of": "",
    "tlb": "#D70E cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Ecc",
    "doc_fift": "[cc+1] PLDIQ",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `PLDI`."
  },
  {
    "name": "PLDUQ",
    "alias_of": "",
    "tlb": "#D70F cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D70Fcc",
    "doc_fift": "[cc+1] PLDUQ",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `PLDU`."
  },
  {
    "name": "PLDUZ",
    "alias_of": "",
    "tlb": "#D714_ c:uint3",
    "doc_category": "cell_parse",
    "doc_opcode": "D714_c",
    "doc_fift": "[32(c+1)] PLDUZ",
    "doc_stack": "s - s x",
    "doc_gas": 26,
    "doc_description": "Preloads the first `32(c+1)` bits of _Slice_ `s` into an unsigned integer `x`, for `0 <= c <= 7`. If `s` is shorter than necessary, missing bits are assumed to be zero. This operation is intended to be used along with `IFBITJMP` and similar instructions."
  },
  {
    "name": "LDSLICEX",
    "alias_of": "",
    "tlb": "#D718",
    "doc_category": "cell_parse",
    "doc_opcode": "D718",
    "doc_fift": "LDSLICEX",
    "doc_stack": "s l - s'' s'",
    "doc_gas": 26,
    "doc_description": "Loads the first `0 <= l <= 1023` bits from _Slice_ `s` into a separate _Slice_ `s''`, returning the remainder of `s` as `s'`."
  },
  {
    "name": "PLDSLICEX",
    "alias_of": "",
    "tlb": "#D719",
    "doc_category": "cell_parse",
    "doc_opcode": "D719",
    "doc_fift": "PLDSLICEX",
    "doc_stack": "s l - s''",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s` as `s''`."
  },
  {
    "name": "LDSLICEXQ",
    "alias_of": "",
    "tlb": "#D71A",
    "doc_category": "cell_parse",
    "doc_opcode": "D71A",
    "doc_fift": "LDSLICEXQ",
    "doc_stack": "s l - s'' s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `LDSLICEX`."
  },
  {
    "name": "PLDSLICEXQ",
    "alias_of": "",
    "tlb": "#D71B",
    "doc_category": "cell_parse",
    "doc_opcode": "D71B",
    "doc_fift": "PLDSLICEXQ",
    "doc_stack": "s l - s' -1 or 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `LDSLICEXQ`."
  },
  {
    "name": "LDSLICE_ALT",
    "alias_of": "",
    "tlb": "#D71C cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Ccc",
    "doc_fift": "[cc+1] LDSLICE_l",
    "doc_stack": "s - s'' s'",
    "doc_gas": 34,
    "doc_description": "A longer encoding for `LDSLICE`."
  },
  {
    "name": "PLDSLICE",
    "alias_of": "",
    "tlb": "#D71D cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Dcc",
    "doc_fift": "[cc+1] PLDSLICE",
    "doc_stack": "s - s''",
    "doc_gas": 34,
    "doc_description": "Returns the first `0 < cc+1 <= 256` bits of `s` as `s''`."
  },
  {
    "name": "LDSLICEQ",
    "alias_of": "",
    "tlb": "#D71E cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Ecc",
    "doc_fift": "[cc+1] LDSLICEQ",
    "doc_stack": "s - s'' s' -1 or s 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `LDSLICE`."
  },
  {
    "name": "PLDSLICEQ",
    "alias_of": "",
    "tlb": "#D71F cc:uint8",
    "doc_category": "cell_parse",
    "doc_opcode": "D71Fcc",
    "doc_fift": "[cc+1] PLDSLICEQ",
    "doc_stack": "s - s'' -1 or 0",
    "doc_gas": 34,
    "doc_description": "A quiet version of `PLDSLICE`."
  },
  {
    "name": "SDCUTFIRST",
    "alias_of": "",
    "tlb": "#D720",
    "doc_category": "cell_parse",
    "doc_opcode": "D720",
    "doc_fift": "SDCUTFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits of `s`. It is equivalent to `PLDSLICEX`."
  },
  {
    "name": "SDSKIPFIRST",
    "alias_of": "",
    "tlb": "#D721",
    "doc_category": "cell_parse",
    "doc_opcode": "D721",
    "doc_fift": "SDSKIPFIRST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the first `0 <= l <= 1023` bits of `s`. It is equivalent to `LDSLICEX` `NIP`."
  },
  {
    "name": "SDCUTLAST",
    "alias_of": "",
    "tlb": "#D722",
    "doc_category": "cell_parse",
    "doc_opcode": "D722",
    "doc_fift": "SDCUTLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "SDSKIPLAST",
    "alias_of": "",
    "tlb": "#D723",
    "doc_category": "cell_parse",
    "doc_opcode": "D723",
    "doc_fift": "SDSKIPLAST",
    "doc_stack": "s l - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the last `0 <= l <= 1023` bits of `s`."
  },
  {
    "name": "SDSUBSTR",
    "alias_of": "",
    "tlb": "#D724",
    "doc_category": "cell_parse",
    "doc_opcode": "D724",
    "doc_fift": "SDSUBSTR",
    "doc_stack": "s l l' - s'",
    "doc_gas": 26,
    "doc_description": "Returns `0 <= l' <= 1023` bits of `s` starting from offset `0 <= l <= 1023`, thus extracting a bit substring out of the data of `s`."
  },
  {
    "name": "SDBEGINSX",
    "alias_of": "",
    "tlb": "#D726",
    "doc_category": "cell_parse",
    "doc_opcode": "D726",
    "doc_fift": "SDBEGINSX",
    "doc_stack": "s s' - s''",
    "doc_gas": 26,
    "doc_description": "Checks whether `s` begins with (the data bits of) `s'`, and removes `s'` from `s` on success. On failure throws a cell deserialization exception. Primitive `SDPFXREV` can be considered a quiet version of `SDBEGINSX`."
  },
  {
    "name": "SDBEGINSXQ",
    "alias_of": "",
    "tlb": "#D727",
    "doc_category": "cell_parse",
    "doc_opcode": "D727",
    "doc_fift": "SDBEGINSXQ",
    "doc_stack": "s s' - s'' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `SDBEGINSX`."
  },
  {
    "name": "SDBEGINS",
    "alias_of": "",
    "tlb": "#D72A_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72A_xsss",
    "doc_fift": "[slice] SDBEGINS",
    "doc_stack": "s - s''",
    "doc_gas": 31,
    "doc_description": "Checks whether `s` begins with constant bitstring `sss` of length `8x+3` (with continuation bit assumed), where `0 <= x <= 127`, and removes `sss` from `s` on success."
  },
  {
    "name": "SDBEGINSQ",
    "alias_of": "",
    "tlb": "#D72E_ x:(## 7) sss:((8 * x + 3) * Bit)",
    "doc_category": "cell_parse",
    "doc_opcode": "D72E_xsss",
    "doc_fift": "[slice] SDBEGINSQ",
    "doc_stack": "s - s'' -1 or s 0",
    "doc_gas": 31,
    "doc_description": "A quiet version of `SDBEGINS`."
  },
  {
    "name": "SCUTFIRST",
    "alias_of": "",
    "tlb": "#D730",
    "doc_category": "cell_parse",
    "doc_opcode": "D730",
    "doc_fift": "SCUTFIRST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references of `s`."
  },
  {
    "name": "SSKIPFIRST",
    "alias_of": "",
    "tlb": "#D731",
    "doc_category": "cell_parse",
    "doc_opcode": "D731",
    "doc_fift": "SSKIPFIRST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the first `l` bits of `s` and `r` references of `s`."
  },
  {
    "name": "SCUTLAST",
    "alias_of": "",
    "tlb": "#D732",
    "doc_category": "cell_parse",
    "doc_opcode": "D732",
    "doc_fift": "SCUTLAST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns the last `0 <= l <= 1023` data bits and last `0 <= r <= 4` references of `s`."
  },
  {
    "name": "SSKIPLAST",
    "alias_of": "",
    "tlb": "#D733",
    "doc_category": "cell_parse",
    "doc_opcode": "D733",
    "doc_fift": "SSKIPLAST",
    "doc_stack": "s l r - s'",
    "doc_gas": 26,
    "doc_description": "Returns all but the last `l` bits of `s` and `r` references of `s`."
  },
  {
    "name": "SUBSLICE",
    "alias_of": "",
    "tlb": "#D734",
    "doc_category": "cell_parse",
    "doc_opcode": "D734",
    "doc_fift": "SUBSLICE",
    "doc_stack": "s l r l' r' - s'",
    "doc_gas": 26,
    "doc_description": "Returns `0 <= l' <= 1023` bits and `0 <= r' <= 4` references from _Slice_ `s`, after skipping the first `0 <= l <= 1023` bits and first `0 <= r <= 4` references."
  },
  {
    "name": "SPLIT",
    "alias_of": "",
    "tlb": "#D736",
    "doc_category": "cell_parse",
    "doc_opcode": "D736",
    "doc_fift": "SPLIT",
    "doc_stack": "s l r - s' s''",
    "doc_gas": 26,
    "doc_description": "Splits the first `0 <= l <= 1023` data bits and first `0 <= r <= 4` references from `s` into `s'`, returning the remainder of `s` as `s''`."
  },
  {
    "name": "SPLITQ",
    "alias_of": "",
    "tlb": "#D737",
    "doc_category": "cell_parse",
    "doc_opcode": "D737",
    "doc_fift": "SPLITQ",
    "doc_stack": "s l r - s' s'' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "A quiet version of `SPLIT`."
  },
  {
    "name": "XCTOS",
    "alias_of": "",
    "tlb": "#D739",
    "doc_category": "cell_parse",
    "doc_opcode": "D739",
    "doc_fift": "",
    "doc_stack": "c - s ?",
    "doc_gas": "",
    "doc_description": "Transforms an ordinary or exotic cell into a _Slice_, as if it were an ordinary cell. A flag is returned indicating whether `c` is exotic. If that be the case, its type can later be deserialized from the first eight bits of `s`."
  },
  {
    "name": "XLOAD",
    "alias_of": "",
    "tlb": "#D73A",
    "doc_category": "cell_parse",
    "doc_opcode": "D73A",
    "doc_fift": "",
    "doc_stack": "c - c'",
    "doc_gas": "",
    "doc_description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, throws an exception."
  },
  {
    "name": "XLOADQ",
    "alias_of": "",
    "tlb": "#D73B",
    "doc_category": "cell_parse",
    "doc_opcode": "D73B",
    "doc_fift": "",
    "doc_stack": "c - c' -1 or c 0",
    "doc_gas": "",
    "doc_description": "Loads an exotic cell `c` and returns an ordinary cell `c'`. If `c` is already ordinary, does nothing. If `c` cannot be loaded, returns 0."
  },
  {
    "name": "SCHKBITS",
    "alias_of": "",
    "tlb": "#D741",
    "doc_category": "cell_parse",
    "doc_opcode": "D741",
    "doc_fift": "SCHKBITS",
    "doc_stack": "s l -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether there are at least `l` data bits in _Slice_ `s`. If this is not the case, throws a cell deserialisation (i.e., cell underflow) exception."
  },
  {
    "name": "SCHKREFS",
    "alias_of": "",
    "tlb": "#D742",
    "doc_category": "cell_parse",
    "doc_opcode": "D742",
    "doc_fift": "SCHKREFS",
    "doc_stack": "s r -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether there are at least `r` references in _Slice_ `s`."
  },
  {
    "name": "SCHKBITREFS",
    "alias_of": "",
    "tlb": "#D743",
    "doc_category": "cell_parse",
    "doc_opcode": "D743",
    "doc_fift": "SCHKBITREFS",
    "doc_stack": "s l r -",
    "doc_gas": "26/76",
    "doc_description": "Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`."
  },
  {
    "name": "SCHKBITSQ",
    "alias_of": "",
    "tlb": "#D745",
    "doc_category": "cell_parse",
    "doc_opcode": "D745",
    "doc_fift": "SCHKBITSQ",
    "doc_stack": "s l - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether there are at least `l` data bits in _Slice_ `s`."
  },
  {
    "name": "SCHKREFSQ",
    "alias_of": "",
    "tlb": "#D746",
    "doc_category": "cell_parse",
    "doc_opcode": "D746",
    "doc_fift": "SCHKREFSQ",
    "doc_stack": "s r - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether there are at least `r` references in _Slice_ `s`."
  },
  {
    "name": "SCHKBITREFSQ",
    "alias_of": "",
    "tlb": "#D747",
    "doc_category": "cell_parse",
    "doc_opcode": "D747",
    "doc_fift": "SCHKBITREFSQ",
    "doc_stack": "s l r - ?",
    "doc_gas": 26,
    "doc_description": "Checks whether there are at least `l` data bits and `r` references in _Slice_ `s`."
  },
  {
    "name": "PLDREFVAR",
    "alias_of": "",
    "tlb": "#D748",
    "doc_category": "cell_parse",
    "doc_opcode": "D748",
    "doc_fift": "PLDREFVAR",
    "doc_stack": "s n - c",
    "doc_gas": 26,
    "doc_description": "Returns the `n`-th cell reference of _Slice_ `s` for `0 <= n <= 3`."
  },
  {
    "name": "SBITS",
    "alias_of": "",
    "tlb": "#D749",
    "doc_category": "cell_parse",
    "doc_opcode": "D749",
    "doc_fift": "SBITS",
    "doc_stack": "s - l",
    "doc_gas": 26,
    "doc_description": "Returns the number of data bits in _Slice_ `s`."
  },
  {
    "name": "SREFS",
    "alias_of": "",
    "tlb": "#D74A",
    "doc_category": "cell_parse",
    "doc_opcode": "D74A",
    "doc_fift": "SREFS",
    "doc_stack": "s - r",
    "doc_gas": 26,
    "doc_description": "Returns the number of references in _Slice_ `s`."
  },
  {
    "name": "SBITREFS",
    "alias_of": "",
    "tlb": "#D74B",
    "doc_category": "cell_parse",
    "doc_opcode": "D74B",
    "doc_fift": "SBITREFS",
    "doc_stack": "s - l r",
    "doc_gas": 26,
    "doc_description": "Returns both the number of data bits and the number of references in `s`."
  },
  {
    "name": "PLDREFIDX",
    "alias_of": "",
    "tlb": "#D74E_ n:uint2",
    "doc_category": "cell_parse",
    "doc_opcode": "D74E_n",
    "doc_fift": "[n] PLDREFIDX",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Returns the `n`-th cell reference of _Slice_ `s`, where `0 <= n <= 3`."
  },
  {
    "name": "PLDREF",
    "alias_of": "PLDREFIDX",
    "tlb": "#D74C",
    "doc_category": "cell_parse",
    "doc_opcode": "D74C",
    "doc_fift": "PLDREF",
    "doc_stack": "s - c",
    "doc_gas": 26,
    "doc_description": "Preloads the first cell reference of a _Slice_."
  },
  {
    "name": "LDILE4",
    "alias_of": "",
    "tlb": "#D750",
    "doc_category": "cell_parse",
    "doc_opcode": "D750",
    "doc_fift": "LDILE4",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian signed 32-bit integer."
  },
  {
    "name": "LDULE4",
    "alias_of": "",
    "tlb": "#D751",
    "doc_category": "cell_parse",
    "doc_opcode": "D751",
    "doc_fift": "LDULE4",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "LDILE8",
    "alias_of": "",
    "tlb": "#D752",
    "doc_category": "cell_parse",
    "doc_opcode": "D752",
    "doc_fift": "LDILE8",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian signed 64-bit integer."
  },
  {
    "name": "LDULE8",
    "alias_of": "",
    "tlb": "#D753",
    "doc_category": "cell_parse",
    "doc_opcode": "D753",
    "doc_fift": "LDULE8",
    "doc_stack": "s - x s'",
    "doc_gas": 26,
    "doc_description": "Loads a little-endian unsigned 64-bit integer."
  },
  {
    "name": "PLDILE4",
    "alias_of": "",
    "tlb": "#D754",
    "doc_category": "cell_parse",
    "doc_opcode": "D754",
    "doc_fift": "PLDILE4",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Preloads a little-endian signed 32-bit integer."
  },
  {
    "name": "PLDULE4",
    "alias_of": "",
    "tlb": "#D755",
    "doc_category": "cell_parse",
    "doc_opcode": "D755",
    "doc_fift": "PLDULE4",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Preloads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "PLDILE8",
    "alias_of": "",
    "tlb": "#D756",
    "doc_category": "cell_parse",
    "doc_opcode": "D756",
    "doc_fift": "PLDILE8",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Preloads a little-endian signed 64-bit integer."
  },
  {
    "name": "PLDULE8",
    "alias_of": "",
    "tlb": "#D757",
    "doc_category": "cell_parse",
    "doc_opcode": "D757",
    "doc_fift": "PLDULE8",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Preloads a little-endian unsigned 64-bit integer."
  },
  {
    "name": "LDILE4Q",
    "alias_of": "",
    "tlb": "#D758",
    "doc_category": "cell_parse",
    "doc_opcode": "D758",
    "doc_fift": "LDILE4Q",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quietly loads a little-endian signed 32-bit integer."
  },
  {
    "name": "LDULE4Q",
    "alias_of": "",
    "tlb": "#D759",
    "doc_category": "cell_parse",
    "doc_opcode": "D759",
    "doc_fift": "LDULE4Q",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quietly loads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "LDILE8Q",
    "alias_of": "",
    "tlb": "#D75A",
    "doc_category": "cell_parse",
    "doc_opcode": "D75A",
    "doc_fift": "LDILE8Q",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quietly loads a little-endian signed 64-bit integer."
  },
  {
    "name": "LDULE8Q",
    "alias_of": "",
    "tlb": "#D75B",
    "doc_category": "cell_parse",
    "doc_opcode": "D75B",
    "doc_fift": "LDULE8Q",
    "doc_stack": "s - x s' -1 or s 0",
    "doc_gas": 26,
    "doc_description": "Quietly loads a little-endian unsigned 64-bit integer."
  },
  {
    "name": "PLDILE4Q",
    "alias_of": "",
    "tlb": "#D75C",
    "doc_category": "cell_parse",
    "doc_opcode": "D75C",
    "doc_fift": "PLDILE4Q",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quietly preloads a little-endian signed 32-bit integer."
  },
  {
    "name": "PLDULE4Q",
    "alias_of": "",
    "tlb": "#D75D",
    "doc_category": "cell_parse",
    "doc_opcode": "D75D",
    "doc_fift": "PLDULE4Q",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quietly preloads a little-endian unsigned 32-bit integer."
  },
  {
    "name": "PLDILE8Q",
    "alias_of": "",
    "tlb": "#D75E",
    "doc_category": "cell_parse",
    "doc_opcode": "D75E",
    "doc_fift": "PLDILE8Q",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quietly preloads a little-endian signed 64-bit integer."
  },
  {
    "name": "PLDULE8Q",
    "alias_of": "",
    "tlb": "#D75F",
    "doc_category": "cell_parse",
    "doc_opcode": "D75F",
    "doc_fift": "PLDULE8Q",
    "doc_stack": "s - x -1 or 0",
    "doc_gas": 26,
    "doc_description": "Quietly preloads a little-endian unsigned 64-bit integer."
  },
  {
    "name": "LDZEROES",
    "alias_of": "",
    "tlb": "#D760",
    "doc_category": "cell_parse",
    "doc_opcode": "D760",
    "doc_fift": "LDZEROES",
    "doc_stack": "s - n s'",
    "doc_gas": 26,
    "doc_description": "Returns the count `n` of leading zero bits in `s`, and removes these bits from `s`."
  },
  {
    "name": "LDONES",
    "alias_of": "",
    "tlb": "#D761",
    "doc_category": "cell_parse",
    "doc_opcode": "D761",
    "doc_fift": "LDONES",
    "doc_stack": "s - n s'",
    "doc_gas": 26,
    "doc_description": "Returns the count `n` of leading one bits in `s`, and removes these bits from `s`."
  },
  {
    "name": "LDSAME",
    "alias_of": "",
    "tlb": "#D762",
    "doc_category": "cell_parse",
    "doc_opcode": "D762",
    "doc_fift": "LDSAME",
    "doc_stack": "s x - n s'",
    "doc_gas": 26,
    "doc_description": "Returns the count `n` of leading bits equal to `0 <= x <= 1` in `s`, and removes these bits from `s`."
  },
  {
    "name": "SDEPTH",
    "alias_of": "",
    "tlb": "#D764",
    "doc_category": "cell_parse",
    "doc_opcode": "D764",
    "doc_fift": "SDEPTH",
    "doc_stack": "s - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Slice_ `s`. If `s` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `s`."
  },
  {
    "name": "CDEPTH",
    "alias_of": "",
    "tlb": "#D765",
    "doc_category": "cell_parse",
    "doc_opcode": "D765",
    "doc_fift": "CDEPTH",
    "doc_stack": "c - x",
    "doc_gas": 26,
    "doc_description": "Returns the depth of _Cell_ `c`. If `c` has no references, then `x=0`; otherwise `x` is one plus the maximum of depths of cells referred to from `c`. If `c` is a _Null_ instead of a _Cell_, returns zero."
  },
  {
    "name": "CLEVEL",
    "alias_of": "",
    "tlb": "#D766",
    "doc_category": "cell_parse",
    "doc_opcode": "D766",
    "doc_fift": "CLEVEL",
    "doc_stack": "cell - level",
    "doc_gas": 26,
    "doc_description": "Returns level of the cell"
  },
  {
    "name": "CLEVELMASK",
    "alias_of": "",
    "tlb": "#D767",
    "doc_category": "cell_parse",
    "doc_opcode": "D767",
    "doc_fift": "CLEVELMASK",
    "doc_stack": "cell - level_mask",
    "doc_gas": 26,
    "doc_description": "Returns level mask of the cell"
  },
  {
    "name": "CHASHIX",
    "alias_of": "",
    "tlb": "#D770",
    "doc_category": "cell_parse",
    "doc_opcode": "D770",
    "doc_fift": "CHASHIX",
    "doc_stack": "cell i - depth",
    "doc_gas": 26,
    "doc_description": "Returns ith hash of the cell (i is in range 0..3)"
  },
  {
    "name": "CDEPTHIX",
    "alias_of": "",
    "tlb": "#D771",
    "doc_category": "cell_parse",
    "doc_opcode": "D771",
    "doc_fift": "CDEPTHIX",
    "doc_stack": "cell i - depth",
    "doc_gas": 26,
    "doc_description": "Returns ith depth of the cell (i is in range 0..3)"
  }
]
