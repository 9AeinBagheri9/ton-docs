[
  {
    "name": "ADD",
    "alias_of": "",
    "tlb": "#A0",
    "doc_category": "arithm_basic",
    "doc_opcode": "A0",
    "doc_fift": "ADD",
    "doc_stack": "x y - x+y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "SUB",
    "alias_of": "",
    "tlb": "#A1",
    "doc_category": "arithm_basic",
    "doc_opcode": "A1",
    "doc_fift": "SUB",
    "doc_stack": "x y - x-y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "SUBR",
    "alias_of": "",
    "tlb": "#A2",
    "doc_category": "arithm_basic",
    "doc_opcode": "A2",
    "doc_fift": "SUBR",
    "doc_stack": "x y - y-x",
    "doc_gas": 18,
    "doc_description": "Equivalent to `SWAP` `SUB`."
  },
  {
    "name": "NEGATE",
    "alias_of": "",
    "tlb": "#A3",
    "doc_category": "arithm_basic",
    "doc_opcode": "A3",
    "doc_fift": "NEGATE",
    "doc_stack": "x - -x",
    "doc_gas": 18,
    "doc_description": "Equivalent to `-1 MULCONST` or to `ZERO SUBR`.\nNotice that it triggers an integer overflow exception if `x=-2^256`."
  },
  {
    "name": "INC",
    "alias_of": "",
    "tlb": "#A4",
    "doc_category": "arithm_basic",
    "doc_opcode": "A4",
    "doc_fift": "INC",
    "doc_stack": "x - x+1",
    "doc_gas": 18,
    "doc_description": "Equivalent to `1 ADDCONST`."
  },
  {
    "name": "DEC",
    "alias_of": "",
    "tlb": "#A5",
    "doc_category": "arithm_basic",
    "doc_opcode": "A5",
    "doc_fift": "DEC",
    "doc_stack": "x - x-1",
    "doc_gas": 18,
    "doc_description": "Equivalent to `-1 ADDCONST`."
  },
  {
    "name": "ADDCONST",
    "alias_of": "",
    "tlb": "#A6 cc:int8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A6cc",
    "doc_fift": "[cc] ADDCONST\n[cc] ADDINT\n[-cc] SUBCONST\n[-cc] SUBINT",
    "doc_stack": "x - x+cc",
    "doc_gas": 26,
    "doc_description": "`-128 <= cc <= 127`."
  },
  {
    "name": "MULCONST",
    "alias_of": "",
    "tlb": "#A7 cc:int8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A7cc",
    "doc_fift": "[cc] MULCONST\n[cc] MULINT",
    "doc_stack": "x - x*cc",
    "doc_gas": 26,
    "doc_description": "`-128 <= cc <= 127`."
  },
  {
    "name": "MUL",
    "alias_of": "",
    "tlb": "#A8",
    "doc_category": "arithm_basic",
    "doc_opcode": "A8",
    "doc_fift": "MUL",
    "doc_stack": "x y - x*y",
    "doc_gas": 18,
    "doc_description": ""
  },
  {
    "name": "DIV_BASE",
    "alias_of": "",
    "tlb": "#A9 m:uint1 s:uint2 cdft:(Either [ d:uint2 f:uint2 ] [ d:uint2 f:uint2 tt:uint8 ])",
    "doc_category": "arithm_div",
    "doc_opcode": "A9mscdf",
    "doc_fift": "",
    "doc_stack": "",
    "doc_gas": 26,
    "doc_description": "This is the general encoding of division, with an optional pre-multiplication and an optional replacement of the division or multiplication by a shift. Variable fields are as follows:\n`0 <= m <= 1`  -  Indicates whether there is pre-multiplication (`MULDIV` and its variants), possibly replaced by a left shift.\n`0 <= s <= 2`  -  Indicates whether either the multiplication or the division have been replaced by shifts: `s=0` - no replacement, `s=1` - division replaced by a right shift, `s=2` - multiplication replaced by a left shift (possible only for `m=1`).\n`0 <= c <= 1`  -  Indicates whether there is a constant one-byte argument `tt` for the shift operator (if `s!=0`). For `s=0`, `c=0`. If `c=1`, then `0 <= tt <= 255`, and the shift is performed by `tt+1` bits. If `s!=0` and `c=0`, then the shift amount is provided to the instruction as a top-of-stack _Integer_ in range `0...256`.\n`1 <= d <= 3`  -  Indicates which results of division are required: `1` - only the quotient, `2` - only the remainder, `3` - both.\n`0 <= f <= 2`  -  Rounding mode: `0` - floor, `1` - nearest integer, `2` - ceiling.\nAll instructions below are variants of this."
  },
  {
    "name": "DIV",
    "alias_of": "DIV_BASE",
    "tlb": "#A904",
    "doc_category": "arithm_div",
    "doc_opcode": "A904",
    "doc_fift": "DIV",
    "doc_stack": "x y - q",
    "doc_gas": 26,
    "doc_description": "`q=floor(x/y)`, `r=x-y*q`"
  },
  {
    "name": "DIVR",
    "alias_of": "DIV_BASE",
    "tlb": "#A905",
    "doc_category": "arithm_div",
    "doc_opcode": "A905",
    "doc_fift": "DIVR",
    "doc_stack": "x y - q’",
    "doc_gas": 26,
    "doc_description": "`q’=round(x/y)`, `r’=x-y*q’`"
  },
  {
    "name": "DIVC",
    "alias_of": "DIV_BASE",
    "tlb": "#A906",
    "doc_category": "arithm_div",
    "doc_opcode": "A906",
    "doc_fift": "DIVC",
    "doc_stack": "x y - q''",
    "doc_gas": 26,
    "doc_description": "`q’’=ceil(x/y)`, `r’’=x-y*q’’`"
  },
  {
    "name": "MOD",
    "alias_of": "DIV_BASE",
    "tlb": "#A908",
    "doc_category": "arithm_div",
    "doc_opcode": "A908",
    "doc_fift": "MOD",
    "doc_stack": "x y - r",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "DIVMOD",
    "alias_of": "DIV_BASE",
    "tlb": "#A90C",
    "doc_category": "arithm_div",
    "doc_opcode": "A90C",
    "doc_fift": "DIVMOD",
    "doc_stack": "x y - q r",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "DIVMODR",
    "alias_of": "DIV_BASE",
    "tlb": "#A90D",
    "doc_category": "arithm_div",
    "doc_opcode": "A90D",
    "doc_fift": "DIVMODR",
    "doc_stack": "x y - q' r'",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "DIVMODC",
    "alias_of": "DIV_BASE",
    "tlb": "#A90E",
    "doc_category": "arithm_div",
    "doc_opcode": "A90E",
    "doc_fift": "DIVMODC",
    "doc_stack": "x y - q'' r''",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "RSHIFTR_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A925",
    "doc_category": "arithm_div",
    "doc_opcode": "A925",
    "doc_fift": "RSHIFTR",
    "doc_stack": "x y - round(x/2^y)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "RSHIFTC_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A926",
    "doc_category": "arithm_div",
    "doc_opcode": "A926",
    "doc_fift": "RSHIFTC",
    "doc_stack": "x y - ceil(x/2^y)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "RSHIFTR",
    "alias_of": "DIV_BASE",
    "tlb": "#A935 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A935tt",
    "doc_fift": "[tt+1] RSHIFTR#",
    "doc_stack": "x y - round(x/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "RSHIFTC",
    "alias_of": "DIV_BASE",
    "tlb": "#A936 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A936tt",
    "doc_fift": "[tt+1] RSHIFTC#",
    "doc_stack": "x y - ceil(x/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "MODPOW2",
    "alias_of": "DIV_BASE",
    "tlb": "#A938 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A938tt",
    "doc_fift": "[tt+1] MODPOW2#",
    "doc_stack": "x - x mod 2^(tt+1)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "MULDIV",
    "alias_of": "DIV_BASE",
    "tlb": "#A984",
    "doc_category": "arithm_div",
    "doc_opcode": "A98",
    "doc_fift": "MULDIV",
    "doc_stack": "x y z - q",
    "doc_gas": 26,
    "doc_description": "`q=floor(x*y/z)`"
  },
  {
    "name": "MULDIVR",
    "alias_of": "DIV_BASE",
    "tlb": "#A985",
    "doc_category": "arithm_div",
    "doc_opcode": "A985",
    "doc_fift": "MULDIVR",
    "doc_stack": "x y z - q'",
    "doc_gas": 26,
    "doc_description": "`q'=round(x*y/z)`"
  },
  {
    "name": "MULDIVMOD",
    "alias_of": "DIV_BASE",
    "tlb": "#A98C",
    "doc_category": "arithm_div",
    "doc_opcode": "A98C",
    "doc_fift": "MULDIVMOD",
    "doc_stack": "x y z - q r",
    "doc_gas": 26,
    "doc_description": "`q=floor(x*y/z)`, `r=x*y-z*q`"
  },
  {
    "name": "MULRSHIFT_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9A4",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A4",
    "doc_fift": "MULRSHIFT",
    "doc_stack": "x y z - floor(x*y/2^z)",
    "doc_gas": 26,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "MULRSHIFTR_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9A5",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A5",
    "doc_fift": "MULRSHIFTR",
    "doc_stack": "x y z - round(x*y/2^z)",
    "doc_gas": 26,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "MULRSHIFTC_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9A6",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A6",
    "doc_fift": "MULRSHIFTC",
    "doc_stack": "x y z - ceil(x*y/2^z)",
    "doc_gas": 34,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "MULRSHIFT",
    "alias_of": "DIV_BASE",
    "tlb": "#A9B4 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9B4tt",
    "doc_fift": "[tt+1] MULRSHIFT#",
    "doc_stack": "x y - floor(x*y/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "MULRSHIFTR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9B5 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9B5tt",
    "doc_fift": "[tt+1] MULRSHIFTR#",
    "doc_stack": "x y - round(x*y/2^(tt+1))",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "MULRSHIFTC",
    "alias_of": "DIV_BASE",
    "tlb": "#A9B6 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9B6tt",
    "doc_fift": "[tt+1] MULRSHIFTC#",
    "doc_stack": "x y - ceil(x*y/2^(tt+1))",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "LSHIFTDIV_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9C4",
    "doc_category": "arithm_div",
    "doc_opcode": "A9C4",
    "doc_fift": "LSHIFTDIV",
    "doc_stack": "x y z - floor(2^z*x/y)",
    "doc_gas": 26,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "LSHIFTDIVR_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9C5",
    "doc_category": "arithm_div",
    "doc_opcode": "A9C5",
    "doc_fift": "LSHIFTDIVR",
    "doc_stack": "x y z - round(2^z*x/y)",
    "doc_gas": 26,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "LSHIFTDIVC_VAR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9C6",
    "doc_category": "arithm_div",
    "doc_opcode": "A9C6",
    "doc_fift": "LSHIFTDIVC",
    "doc_stack": "x y z - ceil(2^z*x/y)",
    "doc_gas": 34,
    "doc_description": "`0 <= z <= 256`"
  },
  {
    "name": "LSHIFTDIV",
    "alias_of": "DIV_BASE",
    "tlb": "#A9D4 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D4tt",
    "doc_fift": "[tt+1] LSHIFT#DIV",
    "doc_stack": "x y - floor(2^(tt+1)*x/y)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "LSHIFTDIVR",
    "alias_of": "DIV_BASE",
    "tlb": "#A9D5 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D5tt",
    "doc_fift": "[tt+1] LSHIFT#DIVR",
    "doc_stack": "x y - round(2^(tt+1)*x/y)",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "LSHIFTDIVC",
    "alias_of": "DIV_BASE",
    "tlb": "#A9D6 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D6tt",
    "doc_fift": "[tt+1] LSHIFT#DIVC",
    "doc_stack": "x y - ceil(2^(tt+1)*x/y)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "LSHIFT",
    "alias_of": "",
    "tlb": "#AA cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "AAcc",
    "doc_fift": "[cc+1] LSHIFT#",
    "doc_stack": "x - x*2^(cc+1)",
    "doc_gas": 26,
    "doc_description": "`0 <= cc <= 255`"
  },
  {
    "name": "RSHIFT",
    "alias_of": "",
    "tlb": "#AB cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "ABcc",
    "doc_fift": "[cc+1] RSHIFT#",
    "doc_stack": "x - floor(x/2^(cc+1))",
    "doc_gas": 18,
    "doc_description": "`0 <= cc <= 255`"
  },
  {
    "name": "LSHIFT_VAR",
    "alias_of": "",
    "tlb": "#AC",
    "doc_category": "arithm_logical",
    "doc_opcode": "AC",
    "doc_fift": "LSHIFT",
    "doc_stack": "x y - x*2^y",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`"
  },
  {
    "name": "RSHIFT_VAR",
    "alias_of": "",
    "tlb": "#AD",
    "doc_category": "arithm_logical",
    "doc_opcode": "AD",
    "doc_fift": "RSHIFT",
    "doc_stack": "x y - floor(x/2^y)",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`"
  },
  {
    "name": "POW2",
    "alias_of": "",
    "tlb": "#AE",
    "doc_category": "arithm_logical",
    "doc_opcode": "AE",
    "doc_fift": "POW2",
    "doc_stack": "y - 2^y",
    "doc_gas": 18,
    "doc_description": "`0 <= y <= 1023`\nEquivalent to `ONE` `SWAP` `LSHIFT`."
  },
  {
    "name": "AND",
    "alias_of": "",
    "tlb": "#B0",
    "doc_category": "arithm_logical",
    "doc_opcode": "B0",
    "doc_fift": "AND",
    "doc_stack": "x y - x&y",
    "doc_gas": 18,
    "doc_description": "Bitwise and of two signed integers `x` and `y`, sign-extended to infinity."
  },
  {
    "name": "OR",
    "alias_of": "",
    "tlb": "#B1",
    "doc_category": "arithm_logical",
    "doc_opcode": "B1",
    "doc_fift": "OR",
    "doc_stack": "x y - x|y",
    "doc_gas": 18,
    "doc_description": "Bitwise or of two integers."
  },
  {
    "name": "XOR",
    "alias_of": "",
    "tlb": "#B2",
    "doc_category": "arithm_logical",
    "doc_opcode": "B2",
    "doc_fift": "XOR",
    "doc_stack": "x y - x xor y",
    "doc_gas": 18,
    "doc_description": "Bitwise xor of two integers."
  },
  {
    "name": "NOT",
    "alias_of": "",
    "tlb": "#B3",
    "doc_category": "arithm_logical",
    "doc_opcode": "B3",
    "doc_fift": "NOT",
    "doc_stack": "x - ~x",
    "doc_gas": 26,
    "doc_description": "Bitwise not of an integer."
  },
  {
    "name": "FITS",
    "alias_of": "",
    "tlb": "#B4 cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "B4cc",
    "doc_fift": "[cc+1] FITS",
    "doc_stack": "x - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a `cc+1`-bit signed integer for `0 <= cc <= 255` (i.e., whether `-2^cc <= x < 2^cc`).\nIf not, either triggers an integer overflow exception, or replaces `x` with a `NaN` (quiet version)."
  },
  {
    "name": "CHKBOOL",
    "alias_of": "FITS",
    "tlb": "#B400",
    "doc_category": "arithm_logical",
    "doc_opcode": "B400",
    "doc_fift": "CHKBOOL",
    "doc_stack": "x - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a “boolean value'' (i.e., either 0 or -1)."
  },
  {
    "name": "UFITS",
    "alias_of": "",
    "tlb": "#B5 cc:uint8",
    "doc_category": "arithm_logical",
    "doc_opcode": "B5cc",
    "doc_fift": "[cc+1] UFITS",
    "doc_stack": "x - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a `cc+1`-bit unsigned integer for `0 <= cc <= 255` (i.e., whether `0 <= x < 2^(cc+1)`)."
  },
  {
    "name": "CHKBIT",
    "alias_of": "UFITS",
    "tlb": "#B500",
    "doc_category": "arithm_logical",
    "doc_opcode": "B500",
    "doc_fift": "CHKBIT",
    "doc_stack": "x - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a binary digit (i.e., zero or one)."
  },
  {
    "name": "FITSX",
    "alias_of": "",
    "tlb": "#B600",
    "doc_category": "arithm_logical",
    "doc_opcode": "B600",
    "doc_fift": "FITSX",
    "doc_stack": "x c - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a `c`-bit signed integer for `0 <= c <= 1023`."
  },
  {
    "name": "UFITSX",
    "alias_of": "",
    "tlb": "#B601",
    "doc_category": "arithm_logical",
    "doc_opcode": "B601",
    "doc_fift": "UFITSX",
    "doc_stack": "x c - x",
    "doc_gas": "26/76",
    "doc_description": "Checks whether `x` is a `c`-bit unsigned integer for `0 <= c <= 1023`."
  },
  {
    "name": "BITSIZE",
    "alias_of": "",
    "tlb": "#B602",
    "doc_category": "arithm_logical",
    "doc_opcode": "B602",
    "doc_fift": "BITSIZE",
    "doc_stack": "x - c",
    "doc_gas": 26,
    "doc_description": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit signed integer (`-2^(c-1) <= c < 2^(c-1)`)."
  },
  {
    "name": "UBITSIZE",
    "alias_of": "",
    "tlb": "#B603",
    "doc_category": "arithm_logical",
    "doc_opcode": "B603",
    "doc_fift": "UBITSIZE",
    "doc_stack": "x - c",
    "doc_gas": 26,
    "doc_description": "Computes smallest `c >= 0` such that `x` fits into a `c`-bit unsigned integer (`0 <= x < 2^c`), or throws a range check exception."
  },
  {
    "name": "MIN",
    "alias_of": "",
    "tlb": "#B608",
    "doc_category": "arithm_logical",
    "doc_opcode": "B608",
    "doc_fift": "MIN",
    "doc_stack": "x y - x or y",
    "doc_gas": 26,
    "doc_description": "Computes the minimum of two integers `x` and `y`."
  },
  {
    "name": "MAX",
    "alias_of": "",
    "tlb": "#B609",
    "doc_category": "arithm_logical",
    "doc_opcode": "B609",
    "doc_fift": "MAX",
    "doc_stack": "x y - x or y",
    "doc_gas": 26,
    "doc_description": "Computes the maximum of two integers `x` and `y`."
  },
  {
    "name": "MINMAX",
    "alias_of": "",
    "tlb": "#B60A",
    "doc_category": "arithm_logical",
    "doc_opcode": "B60A",
    "doc_fift": "MINMAX\nINTSORT2",
    "doc_stack": "x y - x y or y x",
    "doc_gas": 26,
    "doc_description": "Sorts two integers. Quiet version of this operation returns two `NaN`s if any of the arguments are `NaN`s."
  },
  {
    "name": "ABS",
    "alias_of": "",
    "tlb": "#B60B",
    "doc_category": "arithm_logical",
    "doc_opcode": "B60B",
    "doc_fift": "ABS",
    "doc_stack": "x - |x|",
    "doc_gas": 26,
    "doc_description": "Computes the absolute value of an integer `x`."
  },
  {
    "name": "QADD",
    "alias_of": "",
    "tlb": "#B7A0",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A0",
    "doc_fift": "QADD",
    "doc_stack": "x y - x+y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QSUB",
    "alias_of": "",
    "tlb": "#B7A1",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A1",
    "doc_fift": "QSUB",
    "doc_stack": "x y - x-y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QSUBR",
    "alias_of": "",
    "tlb": "#B7A2",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A2",
    "doc_fift": "QSUBR",
    "doc_stack": "x y - y-x",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QNEGATE",
    "alias_of": "",
    "tlb": "#B7A3",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A3",
    "doc_fift": "QNEGATE",
    "doc_stack": "x - -x",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QINC",
    "alias_of": "",
    "tlb": "#B7A4",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A4",
    "doc_fift": "QINC",
    "doc_stack": "x - x+1",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QDEC",
    "alias_of": "",
    "tlb": "#B7A5",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A5",
    "doc_fift": "QDEC",
    "doc_stack": "x - x-1",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QMUL",
    "alias_of": "",
    "tlb": "#B7A8",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A8",
    "doc_fift": "QMUL",
    "doc_stack": "x y - x*y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QDIV",
    "alias_of": "",
    "tlb": "#B7A904",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A904",
    "doc_fift": "QDIV",
    "doc_stack": "x y - q",
    "doc_gas": 34,
    "doc_description": "Division returns `NaN` if `y=0`."
  },
  {
    "name": "QDIVR",
    "alias_of": "",
    "tlb": "#B7A905",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A905",
    "doc_fift": "QDIVR",
    "doc_stack": "x y - q’",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QDIVC",
    "alias_of": "",
    "tlb": "#B7A906",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A906",
    "doc_fift": "QDIVC",
    "doc_stack": "x y - q''",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QMOD",
    "alias_of": "",
    "tlb": "#B7A908",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A908",
    "doc_fift": "QMOD",
    "doc_stack": "x y - r",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QDIVMOD",
    "alias_of": "",
    "tlb": "#B7A90C",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A90C",
    "doc_fift": "QDIVMOD",
    "doc_stack": "x y - q r",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QDIVMODR",
    "alias_of": "",
    "tlb": "#B7A90D",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A90D",
    "doc_fift": "QDIVMODR",
    "doc_stack": "x y - q' r'",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QDIVMODC",
    "alias_of": "",
    "tlb": "#B7A90E",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A90E",
    "doc_fift": "QDIVMODC",
    "doc_stack": "x y - q'' r''",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QMULDIVR",
    "alias_of": "",
    "tlb": "#B7A985",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A985",
    "doc_fift": "QMULDIVR",
    "doc_stack": "x y z - q'",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QMULDIVMOD",
    "alias_of": "",
    "tlb": "#B7A98C",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7A98C",
    "doc_fift": "QMULDIVMOD",
    "doc_stack": "x y z - q r",
    "doc_gas": 34,
    "doc_description": ""
  },
  {
    "name": "QLSHIFT",
    "alias_of": "",
    "tlb": "#B7AC",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7AC",
    "doc_fift": "QLSHIFT",
    "doc_stack": "x y - x*2^y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QRSHIFT",
    "alias_of": "",
    "tlb": "#B7AD",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7AD",
    "doc_fift": "QRSHIFT",
    "doc_stack": "x y - floor(x/2^y)",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QPOW2",
    "alias_of": "",
    "tlb": "#B7AE",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7AE",
    "doc_fift": "QPOW2",
    "doc_stack": "y - 2^y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QAND",
    "alias_of": "",
    "tlb": "#B7B0",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B0",
    "doc_fift": "QAND",
    "doc_stack": "x y - x&y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QOR",
    "alias_of": "",
    "tlb": "#B7B1",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B1",
    "doc_fift": "QOR",
    "doc_stack": "x y - x|y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QXOR",
    "alias_of": "",
    "tlb": "#B7B2",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B2",
    "doc_fift": "QXOR",
    "doc_stack": "x y - x xor y",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QNOT",
    "alias_of": "",
    "tlb": "#B7B3",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B3",
    "doc_fift": "QNOT",
    "doc_stack": "x - ~x",
    "doc_gas": 26,
    "doc_description": ""
  },
  {
    "name": "QFITS",
    "alias_of": "",
    "tlb": "#B7B4 cc:uint8",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B4cc",
    "doc_fift": "[cc+1] QFITS",
    "doc_stack": "x - x",
    "doc_gas": 34,
    "doc_description": "Replaces `x` with a `NaN` if x is not a `cc+1`-bit signed integer, leaves it intact otherwise."
  },
  {
    "name": "QUFITS",
    "alias_of": "",
    "tlb": "#B7B5 cc:uint8",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B5cc",
    "doc_fift": "[cc+1] QUFITS",
    "doc_stack": "x - x",
    "doc_gas": 34,
    "doc_description": "Replaces `x` with a `NaN` if x is not a `cc+1`-bit unsigned integer, leaves it intact otherwise."
  },
  {
    "name": "QFITSX",
    "alias_of": "",
    "tlb": "#B7B600",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B600",
    "doc_fift": "QFITSX",
    "doc_stack": "x c - x",
    "doc_gas": 34,
    "doc_description": "Replaces `x` with a `NaN` if x is not a c-bit signed integer, leaves it intact otherwise."
  },
  {
    "name": "QUFITSX",
    "alias_of": "",
    "tlb": "#B7B601",
    "doc_category": "arithm_quiet",
    "doc_opcode": "B7B601",
    "doc_fift": "QUFITSX",
    "doc_stack": "x c - x",
    "doc_gas": 34,
    "doc_description": "Replaces `x` with a `NaN` if x is not a c-bit unsigned integer, leaves it intact otherwise."
  },
  {
    "name": "MULADDDIVMOD",
    "alias_of": "",
    "tlb": "#A980",
    "doc_category": "arithm_div",
    "doc_opcode": "A980",
    "doc_fift": "MULADDDIVMOD",
    "doc_stack": "x y w z - q=floor((xy+w)/z) r=(xy+w)-zq",
    "doc_gas": 26,
    "doc_description": "Performs multiplication, addition, division, and modulo in one step. Calculates q as floor((xy+w)/z) and r as (xy+w)-zq."
  },
  {
    "name": "MULADDDIVMODR",
    "alias_of": "",
    "tlb": "#A981",
    "doc_category": "arithm_div",
    "doc_opcode": "A981",
    "doc_fift": "MULADDDIVMODR",
    "doc_stack": "x y w z - q=round((xy+w)/z) r=(xy+w)-zq",
    "doc_gas": 26,
    "doc_description": "Similar to MULADDDIVMOD but calculates q as round((xy+w)/z)."
  },
  {
    "name": "MULADDDIVMODC",
    "alias_of": "",
    "tlb": "#A982",
    "doc_category": "arithm_div",
    "doc_opcode": "A982",
    "doc_fift": "MULADDDIVMODC",
    "doc_stack": "x y w z - q=ceil((xy+w)/z) r=(xy+w)-zq",
    "doc_gas": 26,
    "doc_description": "Similar to MULADDDIVMOD but calculates q as ceil((xy+w)/z)."
  },
  {
    "name": "ADDDIVMOD",
    "alias_of": "",
    "tlb": "#A900",
    "doc_category": "arithm_div",
    "doc_opcode": "A900",
    "doc_fift": "ADDDIVMOD",
    "doc_stack": "x w z - q=floor((x+w)/z) r=(x+w)-zq",
    "doc_gas": 26,
    "doc_description": "Performs addition, division, and modulo in one step. Calculates q as floor((x+w)/z) and r as (x+w)-zq."
  },
  {
    "name": "ADDDIVMODR",
    "alias_of": "",
    "tlb": "#A901",
    "doc_category": "arithm_div",
    "doc_opcode": "A901",
    "doc_fift": "ADDDIVMODR",
    "doc_stack": "x w z - q=round((x+w)/z) r=(x+w)-zq",
    "doc_gas": 26,
    "doc_description": "Similar to ADDDIVMOD but calculates q as round((x+w)/z)."
  },
  {
    "name": "ADDDIVMODC",
    "alias_of": "",
    "tlb": "#A902",
    "doc_category": "arithm_div",
    "doc_opcode": "A902",
    "doc_fift": "ADDDIVMODC",
    "doc_stack": "x w y - q=ceil((x+w)/z) r=(x+w)-zq",
    "doc_gas": 26,
    "doc_description": "Similar to ADDDIVMOD but calculates q as ceil((x+w)/z). Incorrect stack description in the provided data; assumed typo for 'z' instead of 'y' in the input stack."
  },
  {
    "name": "ADDRSHIFTMOD",
    "alias_of": "",
    "tlb": "#A920",
    "doc_category": "arithm_div",
    "doc_opcode": "A920",
    "doc_fift": "ADDRSHIFTMOD",
    "doc_stack": "x w z - q=floor((x+w)/2^z) r=(x+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Performs addition, right shift, and modulo in one step. Calculates q as floor((x+w)/2^z) and r as (x+w)-q*2^z."
  },
  {
    "name": "ADDRSHIFTMODR",
    "alias_of": "",
    "tlb": "#A921",
    "doc_category": "arithm_div",
    "doc_opcode": "A921",
    "doc_fift": "ADDRSHIFTMODR",
    "doc_stack": "x w z - q=round((x+w)/2^z) r=(x+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Similar to ADDRSHIFTMOD but calculates q as round((x+w)/2^z)."
  },
  {
    "name": "ADDRSHIFTMODC",
    "alias_of": "",
    "tlb": "#A922",
    "doc_category": "arithm_div",
    "doc_opcode": "A922",
    "doc_fift": "ADDRSHIFTMODC",
    "doc_stack": "x w z - q=ceil((x+w)/2^z) r=(x+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Similar to ADDRSHIFTMOD but calculates q as ceil((x+w)/2^z)."
  },
  {
    "name": "MULADDRSHIFTMOD",
    "alias_of": "",
    "tlb": "#A9A0",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A0",
    "doc_fift": "MULADDRSHIFTMOD",
    "doc_stack": "x y w z - q=floor((xy+w)/2^z) r=(xy+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Combines multiplication, addition, right shift, and modulo. Calculates q as floor((xy+w)/2^z) and r as (xy+w)-q*2^z."
  },
  {
    "name": "MULADDRSHIFTRMOD",
    "alias_of": "",
    "tlb": "#A9A1",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A1",
    "doc_fift": "MULADDRSHIFTRMOD",
    "doc_stack": "x y w z - q=round((xy+w)/2^z) r=(xy+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Similar to MULADDRSHIFTMOD but calculates q as round((xy+w)/2^z)."
  },
  {
    "name": "MULADDRSHIFTCMOD",
    "alias_of": "",
    "tlb": "#A9A2",
    "doc_category": "arithm_div",
    "doc_opcode": "A9A2",
    "doc_fift": "MULADDRSHIFTCMOD",
    "doc_stack": "x y w z - q=ceil((xy+w)/2^z) r=(xy+w)-q*2^z",
    "doc_gas": 26,
    "doc_description": "Similar to MULADDRSHIFTMOD but calculates q as ceil((xy+w)/2^z)."
  },
  {
    "name": "LSHIFTADDDIVMOD",
    "alias_of": "",
    "tlb": "#A9D0 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D0tt",
    "doc_fift": "[tt+1] LSHIFT#ADDDIVMOD",
    "doc_stack": "x w z - q=floor((x*2^y+w)/z) r=(x*2^y+w)-zq",
    "doc_gas": 34,
    "doc_description": "Performs left shift on x, adds w, then divides by z, rounding down for q and calculates remainder r."
  },
  {
    "name": "LSHIFTADDDIVMODR",
    "alias_of": "",
    "tlb": "#A9D1 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D1tt",
    "doc_fift": "[tt+1] LSHIFT#ADDDIVMODR",
    "doc_stack": "x w z - q=round((x*2^y+w)/z) r=(x*2^y+w)-zq",
    "doc_gas": 34,
    "doc_description": "Similar to LSHIFTADDDIVMOD but rounds q to the nearest integer."
  },
  {
    "name": "LSHIFTADDDIVMODC",
    "alias_of": "",
    "tlb": "#A9D2 tt:uint8",
    "doc_category": "arithm_div",
    "doc_opcode": "A9D2tt",
    "doc_fift": "[tt+1] LSHIFT#ADDDIVMODC",
    "doc_stack": "x w z - q=ceil((x*2^y+w)/z) r=(x*2^y+w)-zq",
    "doc_gas": 34,
    "doc_description": "Similar to LSHIFTADDDIVMOD but rounds q up to the nearest integer."
  }
]
