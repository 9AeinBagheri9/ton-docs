[{
  "name": "THROW_SHORT",
  "alias_of": "",
  "tlb": "#F22_ n:uint6",
  "doc_category": "exceptions",
  "doc_opcode": "F22_n",
  "doc_fift": "[n] THROW",
  "doc_stack": "- 0 n",
  "doc_gas": 76,
  "doc_description": "Throws exception `0 <= n <= 63` with parameter zero.\nIn other words, it transfers control to the continuation in `c2`, pushing `0` and `n` into its stack, and discarding the old stack altogether."
},
  {
    "name": "THROWIF_SHORT",
    "alias_of": "",
    "tlb": "#F26_ n:uint6",
    "doc_category": "exceptions",
    "doc_opcode": "F26_n",
    "doc_fift": "[n] THROWIF",
    "doc_stack": "f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n <= 63` with  parameter zero only if integer `f!=0`."
  },
  {
    "name": "THROWIFNOT_SHORT",
    "alias_of": "",
    "tlb": "#F2A_ n:uint6",
    "doc_category": "exceptions",
    "doc_opcode": "F2A_n",
    "doc_fift": "[n] THROWIFNOT",
    "doc_stack": "f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n <= 63` with parameter zero only if integer `f=0`."
  },
  {
    "name": "THROW",
    "alias_of": "",
    "tlb": "#F2C4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2C4_n",
    "doc_fift": "[n] THROW",
    "doc_stack": "- 0 nn",
    "doc_gas": 84,
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROW` for larger values of `n`."
  },
  {
    "name": "THROWARG",
    "alias_of": "",
    "tlb": "#F2CC_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2CC_n",
    "doc_fift": "[n] THROWARG",
    "doc_stack": "x - x nn",
    "doc_gas": 84,
    "doc_description": "Throws exception `0 <= n <  2^11` with parameter `x`, by copying `x` and `n` into the stack of `c2` and transferring control to `c2`."
  },
  {
    "name": "THROWIF",
    "alias_of": "",
    "tlb": "#F2D4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2D4_n",
    "doc_fift": "[n] THROWIF",
    "doc_stack": "f -",
    "doc_gas": "34/84",
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIF` for larger values of `n`."
  },
  {
    "name": "THROWARGIF",
    "alias_of": "",
    "tlb": "#F2DC_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2DC_n",
    "doc_fift": "[n] THROWARGIF",
    "doc_stack": "x f -",
    "doc_gas": "34/84",
    "doc_description": "Throws exception `0 <= nn < 2^11` with parameter `x` only if integer `f!=0`."
  },
  {
    "name": "THROWIFNOT",
    "alias_of": "",
    "tlb": "#F2E4_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2E4_n",
    "doc_fift": "[n] THROWIFNOT",
    "doc_stack": "f -",
    "doc_gas": "34/84",
    "doc_description": "For `0 <= n < 2^11`, an encoding of `[n] THROWIFNOT` for larger values of `n`."
  },
  {
    "name": "THROWARGIFNOT",
    "alias_of": "",
    "tlb": "#F2EC_ n:uint11",
    "doc_category": "exceptions",
    "doc_opcode": "F2EC_n",
    "doc_fift": "[n] THROWARGIFNOT",
    "doc_stack": "x f -",
    "doc_gas": "34/84",
    "doc_description": "Throws exception `0 <= n < 2^11` with parameter `x` only if integer `f=0`."
  },
  {
    "name": "THROWANY",
    "alias_of": "",
    "tlb": "#F2F0",
    "doc_category": "exceptions",
    "doc_opcode": "F2F0",
    "doc_fift": "THROWANY",
    "doc_stack": "n - 0 n",
    "doc_gas": 76,
    "doc_description": "Throws exception `0 <= n < 2^16` with parameter zero.\nApproximately equivalent to `ZERO` `SWAP` `THROWARGANY`."
  },
  {
    "name": "THROWARGANY",
    "alias_of": "",
    "tlb": "#F2F1",
    "doc_category": "exceptions",
    "doc_opcode": "F2F1",
    "doc_fift": "THROWARGANY",
    "doc_stack": "x n - x n",
    "doc_gas": 76,
    "doc_description": "Throws exception `0 <= n < 2^16` with parameter `x`, transferring control to the continuation in `c2`.\nApproximately equivalent to `c2 PUSHCTR` `2 JMPXARGS`."
  },
  {
    "name": "THROWANYIF",
    "alias_of": "",
    "tlb": "#F2F2",
    "doc_category": "exceptions",
    "doc_opcode": "F2F2",
    "doc_fift": "THROWANYIF",
    "doc_stack": "n f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n < 2^16` with parameter zero only if `f!=0`."
  },
  {
    "name": "THROWARGANYIF",
    "alias_of": "",
    "tlb": "#F2F3",
    "doc_category": "exceptions",
    "doc_opcode": "F2F3",
    "doc_fift": "THROWARGANYIF",
    "doc_stack": "x n f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n<2^16` with parameter `x` only if `f!=0`."
  },
  {
    "name": "THROWANYIFNOT",
    "alias_of": "",
    "tlb": "#F2F4",
    "doc_category": "exceptions",
    "doc_opcode": "F2F4",
    "doc_fift": "THROWANYIFNOT",
    "doc_stack": "n f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n<2^16` with parameter zero only if `f=0`."
  },
  {
    "name": "THROWARGANYIFNOT",
    "alias_of": "",
    "tlb": "#F2F5",
    "doc_category": "exceptions",
    "doc_opcode": "F2F5",
    "doc_fift": "THROWARGANYIFNOT",
    "doc_stack": "x n f -",
    "doc_gas": "26/76",
    "doc_description": "Throws exception `0 <= n<2^16` with parameter `x` only if `f=0`."
  },
  {
    "name": "TRY",
    "alias_of": "",
    "tlb": "#F2FF",
    "doc_category": "exceptions",
    "doc_opcode": "F2FF",
    "doc_fift": "TRY",
    "doc_stack": "c c' -",
    "doc_gas": 26,
    "doc_description": "Sets `c2` to `c'`, first saving the old value of `c2` both into the savelist of `c'` and into the savelist of the current continuation, which is stored into `c.c0` and `c'.c0`. Then runs `c` similarly to `EXECUTE`. If `c` does not throw any exceptions, the original value of `c2` is automatically restored on return from `c`. If an exception occurs, the execution is transferred to `c'`, but the original value of `c2` is restored in the process, so that `c'` can re-throw the exception by `THROWANY` if it cannot handle it by itself."
  },
  {
    "name": "",
    "alias_of": "",
    "tlb": "",
    "doc_category": "exceptions",
    "doc_opcode": "F2FF",
    "doc_fift": "TRY:<{ code1 }>CATCH<{ code2 }>",
    "doc_stack": "-",
    "doc_gas": "",
    "doc_description": "Equivalent to `<{ code1 }> CONT` `<{ code2 }> CONT` `TRY`."
  },
  {
    "name": "TRYARGS",
    "alias_of": "",
    "tlb": "#F3 p:uint4 r:uint4",
    "doc_category": "exceptions",
    "doc_opcode": "F3pr",
    "doc_fift": "[p] [r] TRYARGS",
    "doc_stack": "c c' -",
    "doc_gas": 26,
    "doc_description": "Similar to `TRY`, but with `[p] [r] CALLXARGS` internally used instead of `EXECUTE`.\nIn this way, all but the top `0 <= p <= 15` stack elements will be saved into current continuation's stack, and then restored upon return from either `c` or `c'`, with the top `0 <= r <= 15` values of the resulting stack of `c` or `c'` copied as return values."
  }
]
